%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: some_vector_graphics.pdf
%%Creator: (Adobe Acrobat 11.0.23)
%%For: diogo
%%CreationDate: 08/02/18, 09:40
%%BoundingBox: -1 0 185 183
%%HiResBoundingBox: 0 0 184.5350 182.2510
%%CropBox: 0 0 184.5350 182.2510
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 26075 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c006 80.159825, 2016/09/16-03:31:08        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreatorTool="Adobe Illustrator CS3"
   xmp:CreateDate="2011-06-22T09:47:01+02:00"
   xmp:ModifyDate="2011-06-22T09:47:01+02:00"
   xmp:MetadataDate="2011-06-22T09:47:01+02:00"
   xmpMM:DocumentID="uuid:76389AD8469EE011A061B0EA59138940"
   xmpMM:InstanceID="uuid:b6c14003-3595-5841-bf20-0852c362d4e3"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 8.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">some_vector_graphics</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqwL82bPT3byh&#xA;dzwxNd2/mTTUtLh1UyR+rMA6xsd15hRUDrTFVTzp5t842fmzR/LHlax064vdRtLu+lm1SaeGJUtX&#xA;hTivoRzNyJn7jFVH6z+fv/Vu8qf9J2o/9kmKu+s/n7/1bvKn/SdqP/ZJirvrP5+/9W7yp/0naj/2&#xA;SYq76z+fv/Vu8qf9J2o/9kmKu+s/n7/1bvKn/SdqP/ZJirvrP5+/9W7yp/0naj/2SYqh4tU/PyS7&#xA;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&#xA;W1KEfa798VROKuxV2KuxV2KuxVDWH93LuD++l3A4/tn/ADriqJxV2KuxV2KuxV2KobTCDptoQQQY&#xA;Y6EDiD8I6DtiqJxV2KuxV2KuxV5x/wA5E/8AknPMP/Rp/wBRsGKvR8VdiqXarqGqWjRix0uTUQ4P&#xA;No5YYuFKUB9VlrX2xVg/5jTWT3PkPUNUtYbDU08wwJEJ3haaNGinDKsqk/C/FSQp8K9MVY/+dHm3&#xA;U/KH5i+Vdcs9Oe9Elhf2PqmOd4ITNcWjNJMbeOaSiRoxoqEnbbFVfyZ5/wDyb8qW959V1LVLzUdS&#xA;mNzqurXmlapJd3UpJ4mV1s1HFFPFFUBVHQdcVT+b8/Pyzjid1ur+VkUlYk0nVAzECvFeVsq1PuQM&#xA;VYR+Wv5o+S7e41Xzb5oubyPzV5hkrLbDTNUmWysYSVtbKN0tmQ8F+ORl2ZyTirOv+V8/lj/y3X3j&#xA;/wAcjVv+yXFXf8r5/LH/AJbr7/uEat/2S4q7/lfP5Y/8t194f8cjVv8AslxVCQfnz+XX6QuzJdX6&#xA;wcYvQlOl6oVegYvxUWvJaE71xVF/8r5/LH/luvv+4Rq3/ZLirv8AlfH5Zf8ALdff9wjVv+yXFXf8&#xA;r5/LH/luvv8AuEat/wBkuKu/5Xz+WNK/Xr6n/bI1b/slxV3/ACvn8sf+W6+/7hGrf9kuKu/5Xx+W&#xA;X/Ldff8AcI1b/slxVCab+fH5c+hJ69zfxOZ5yiNpWqMSnrNwaq2tKMtGp1FaHfFUX/yvn8sf+W6+&#xA;/wC4Rq3/AGS4q7/lfP5Y/wDLdfeH/HI1b/slxV3/ACvn8sf+W6+/7hGrf9kuKu/5Xz+WP/LdfeP/&#xA;AByNW/7JcVd/yvn8sf8Aluvv+4Rq3/ZLirv+V8/lj/y3X3h/xyNW/wCyXFULpX58fl1+i7P6zdX8&#xA;Nz6EfrwtpWqOyPwHJSyWvFip2qNsVRX/ACvn8sev16+p/wBsjVv+yXFXf8r4/LL/AJbr7/uEat/2&#xA;S4q7/lfP5Y/8t19/3CNW/wCyXFXf8r5/LH/luvv+4Rq3/ZLirv8AlfP5Y/8ALdff9wjVv+yXFWFf&#xA;nL+ank3zN+W+r6HoUt9eareG2W2thpmpRFyl1FIw5y26IKIpO5xV7rirsVdiqW61a+XHiW41uKza&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="uuid:75389AD8469EE011A061B0EA59138940"
    stRef:documentID="uuid:22591D136F70E011A864BC364B86479D"/>
   <xmpTPg:MaxPageSize
    stDim:w="209.999994"
    stDim:h="297.000002"
    stDim:unit="Millimeters"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -182.251 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-05 0 mo
-1.52588e-05 182.251 li
184.535 182.251 li
184.535 0 li
cp
clp
.27 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
26.959 4.543 mo
183.066 4.543 li
183.066 160.544 li
26.959 160.544 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
@
.5 lw
1 lc
4 ml
[0 1 ] 0 dsh
183.066 4.54269 mo
183.066 4.54269 li
26.9586 4.54269 mo
183.066 4.54269 li
183.066 43.5087 mo
183.066 43.5087 li
26.9586 43.5087 mo
183.066 43.5087 li
183.066 82.5207 mo
183.066 82.5207 li
26.9586 82.5207 mo
183.066 82.5207 li
183.066 121.534 mo
183.066 121.534 li
26.9586 121.534 mo
183.066 121.534 li
183.066 160.544 mo
183.066 160.544 li
26.9586 160.544 mo
183.066 160.544 li
183.066 4.54269 mo
183.066 4.54269 li
183.066 160.544 mo
183.066 4.54269 li
144.04 4.54269 mo
144.04 4.54269 li
144.04 160.544 mo
144.04 4.54269 li
105.012 4.54269 mo
105.012 4.54269 li
105.012 160.544 mo
105.012 4.54269 li
65.9856 4.54269 mo
65.9856 4.54269 li
65.9856 160.544 mo
65.9856 4.54269 li
26.9586 4.54269 mo
26.9586 4.54269 li
26.9586 160.544 mo
26.9586 4.54269 li
1 /0 /CSD get_res sepcs
.6 sep
@
.27 lw
0 lc
10 ml
[] 0 dsh
26.9586 4.54269 mo
26.9586 6.23471 li
26.9586 160.544 mo
26.9586 158.807 li
26.9586 160.544 mo
26.9586 4.54269 li
26.9586 160.544 mo
183.066 160.544 li
183.066 160.544 mo
183.066 4.54269 li
26.9586 160.544 mo
26.9586 4.54269 li
26.9586 4.54269 mo
183.066 4.54269 li
26.9586 160.544 mo
183.066 160.544 li
1 /0 /CSD get_res sepcs
1 sep
@
22.038 166.851 mo
26.394 166.851 li
26.394 167.372 li
22.038 167.372 li
cp
f
30.7135 169.362 mo
27.7615 169.362 li
27.7615 169.101 li
28.5175 169.038 li
28.6195 169.026 28.6915 168.993 28.7335 168.939 cv
28.7875 168.88 28.8145 168.765 28.8145 168.597 cv
28.8145 164.232 li
28.8145 164.106 28.7975 164.019 28.7645 163.971 cv
28.7325 163.924 28.6765 163.893 28.5985 163.881 cv
27.7615 163.782 li
27.7615 163.557 li
29.6155 163.242 li
29.6605 163.296 li
29.6605 168.597 li
29.6605 168.759 29.6845 168.87 29.7325 168.93 cv
29.7805 168.99 29.8555 169.026 29.9575 169.038 cv
30.7135 169.101 li
cp
f
65.9855 4.54269 mo
65.9855 6.23471 li
65.9855 160.544 mo
65.9855 158.807 li
@
56.526 166.851 mo
60.882 166.851 li
60.882 167.372 li
56.526 167.372 li
cp
f
64.7516 166.356 mo
64.7516 164.49 64.3856 163.557 63.6536 163.557 cv
62.9216 163.557 62.5556 164.49 62.5556 166.356 cv
62.5556 168.222 62.9216 169.155 63.6536 169.155 cv
64.3856 169.155 64.7516 168.222 64.7516 166.356 cv
61.6376 166.356 mo
61.6376 164.28 62.3096 163.242 63.6536 163.242 cv
64.9976 163.242 65.6696 164.28 65.6696 166.356 cv
65.6696 168.432 64.9976 169.47 63.6536 169.47 cv
62.3096 169.47 61.6376 168.432 61.6376 166.356 cv
f
67.2355 169.47 mo
67.0674 169.47 66.9315 169.415 66.8264 169.308 cv
66.7215 169.199 66.6685 169.065 66.6685 168.903 cv
66.6685 168.735 66.7215 168.595 66.8264 168.484 cv
66.9315 168.373 67.0674 168.318 67.2355 168.318 cv
67.4095 168.318 67.5475 168.373 67.6494 168.484 cv
67.7515 168.595 67.8025 168.735 67.8025 168.903 cv
67.7964 169.071 67.7444 169.207 67.6454 169.312 cv
67.5464 169.417 67.4095 169.47 67.2355 169.47 cv
f
72.258 164.033 mo
70.017 164.033 li
69.927 164.033 69.864 164.051 69.828 164.083 cv
69.792 164.116 69.768 164.186 69.756 164.294 cv
69.549 165.977 li
69.567 165.995 li
69.717 165.857 69.913 165.743 70.156 165.654 cv
70.4 165.564 70.641 165.518 70.881 165.518 cv
71.439 165.518 71.889 165.684 72.231 166.013 cv
72.573 166.344 72.744 166.814 72.744 167.427 cv
72.744 168.033 72.561 168.525 72.195 168.902 cv
71.829 169.28 71.292 169.47 70.584 169.47 cv
70.044 169.47 69.609 169.358 69.279 169.137 cv
68.949 168.914 68.784 168.684 68.784 168.443 cv
68.784 168.305 68.838 168.191 68.946 168.102 cv
69.054 168.012 69.159 167.967 69.261 167.967 cv
69.381 167.967 69.465 168.038 69.513 168.182 cv
69.741 168.831 70.119 169.154 70.647 169.154 cv
71.025 169.154 71.313 169.005 71.511 168.704 cv
71.709 168.404 71.808 168.012 71.808 167.525 cv
71.808 166.979 71.69 166.574 71.452 166.31 cv
71.216 166.046 70.932 165.914 70.602 165.914 cv
70.152 165.914 69.741 166.128 69.369 166.555 cv
69.153 166.445 li
69.333 163.43 li
69.423 163.349 li
72.429 163.349 li
72.474 163.421 li
cp
f
105.012 4.54269 mo
105.012 6.23471 li
105.012 160.544 mo
105.012 158.807 li
@
106.075 166.356 mo
106.075 164.49 105.709 163.557 104.976 163.557 cv
104.245 163.557 103.879 164.49 103.879 166.356 cv
103.879 168.222 104.245 169.155 104.976 169.155 cv
105.709 169.155 106.075 168.222 106.075 166.356 cv
102.961 166.356 mo
102.961 164.28 103.633 163.242 104.976 163.242 cv
106.32 163.242 106.993 164.28 106.993 166.356 cv
106.993 168.432 106.32 169.47 104.976 169.47 cv
103.633 169.47 102.961 168.432 102.961 166.356 cv
f
144.039 4.54269 mo
144.039 6.23471 li
144.039 160.544 mo
144.039 158.807 li
@
141.687 166.356 mo
141.687 164.49 141.321 163.557 140.588 163.557 cv
139.857 163.557 139.491 164.49 139.491 166.356 cv
139.491 168.222 139.857 169.155 140.588 169.155 cv
141.321 169.155 141.687 168.222 141.687 166.356 cv
138.573 166.356 mo
138.573 164.28 139.245 163.242 140.588 163.242 cv
141.932 163.242 142.605 164.28 142.605 166.356 cv
142.605 168.432 141.932 169.47 140.588 169.47 cv
139.245 169.47 138.573 168.432 138.573 166.356 cv
f
144.17 169.47 mo
144.002 169.47 143.865 169.415 143.76 169.308 cv
143.655 169.199 143.603 169.065 143.603 168.903 cv
143.603 168.735 143.655 168.595 143.76 168.484 cv
143.865 168.373 144.002 168.318 144.17 168.318 cv
144.344 168.318 144.482 168.373 144.584 168.484 cv
144.686 168.595 144.736 168.735 144.736 168.903 cv
144.731 169.071 144.678 169.207 144.579 169.312 cv
144.481 169.417 144.344 169.47 144.17 169.47 cv
f
149.192 164.033 mo
146.951 164.033 li
146.861 164.033 146.798 164.051 146.762 164.083 cv
146.726 164.116 146.702 164.186 146.69 164.294 cv
146.483 165.977 li
146.501 165.995 li
146.651 165.857 146.847 165.743 147.09 165.654 cv
147.334 165.564 147.575 165.518 147.815 165.518 cv
148.373 165.518 148.823 165.684 149.165 166.013 cv
149.507 166.344 149.678 166.814 149.678 167.427 cv
149.678 168.033 149.495 168.525 149.129 168.902 cv
148.763 169.28 148.226 169.47 147.518 169.47 cv
146.978 169.47 146.543 169.358 146.213 169.137 cv
145.883 168.914 145.718 168.684 145.718 168.443 cv
145.718 168.305 145.772 168.191 145.88 168.102 cv
145.988 168.012 146.093 167.967 146.195 167.967 cv
146.315 167.967 146.399 168.038 146.447 168.182 cv
146.675 168.831 147.053 169.154 147.581 169.154 cv
147.959 169.154 148.247 169.005 148.445 168.704 cv
148.643 168.404 148.742 168.012 148.742 167.525 cv
148.742 166.979 148.624 166.574 148.386 166.31 cv
148.149 166.046 147.866 165.914 147.536 165.914 cv
147.086 165.914 146.675 166.128 146.303 166.555 cv
146.087 166.445 li
146.267 163.43 li
146.357 163.349 li
149.363 163.349 li
149.408 163.421 li
cp
f
183.066 4.54269 mo
183.066 6.23471 li
183.066 160.544 mo
183.066 158.807 li
@
183.698 169.362 mo
180.747 169.362 li
180.747 169.101 li
181.503 169.038 li
181.604 169.026 181.677 168.993 181.719 168.939 cv
181.772 168.88 181.8 168.765 181.8 168.597 cv
181.8 164.232 li
181.8 164.106 181.783 164.019 181.75 163.971 cv
181.717 163.924 181.661 163.893 181.584 163.881 cv
180.747 163.782 li
180.747 163.557 li
182.6 163.242 li
182.645 163.296 li
182.645 168.597 li
182.645 168.759 182.67 168.87 182.718 168.93 cv
182.765 168.99 182.841 169.026 182.942 169.038 cv
183.698 169.101 li
cp
f
183.066 160.544 mo
181.475 160.544 li
26.9586 160.544 mo
28.5056 160.544 li
@
15.048 159.098 mo
19.404 159.098 li
19.404 159.619 li
15.048 159.619 li
cp
f
23.7233 161.609 mo
20.7713 161.609 li
20.7713 161.348 li
21.5273 161.285 li
21.6293 161.273 21.7013 161.24 21.7433 161.186 cv
21.7973 161.127 21.8243 161.012 21.8243 160.844 cv
21.8243 156.479 li
21.8243 156.353 21.8073 156.266 21.7743 156.218 cv
21.7423 156.171 21.6863 156.14 21.6083 156.128 cv
20.7713 156.029 li
20.7713 155.804 li
22.6253 155.489 li
22.6703 155.543 li
22.6703 160.844 li
22.6703 161.006 22.6943 161.117 22.7423 161.177 cv
22.7903 161.237 22.8653 161.273 22.9673 161.285 cv
23.7233 161.348 li
cp
f
183.066 121.533 mo
181.475 121.533 li
26.9586 121.533 mo
28.5056 121.533 li
@
7.98798 121.091 mo
12.344 121.091 li
12.344 121.612 li
7.98798 121.612 li
cp
f
16.214 120.596 mo
16.214 118.73 15.848 117.797 15.116 117.797 cv
14.384 117.797 14.018 118.73 14.018 120.596 cv
14.018 122.462 14.384 123.395 15.116 123.395 cv
15.848 123.395 16.214 122.462 16.214 120.596 cv
13.1 120.596 mo
13.1 118.52 13.772 117.482 15.116 117.482 cv
16.46 117.482 17.132 118.52 17.132 120.596 cv
17.132 122.672 16.46 123.71 15.116 123.71 cv
13.772 123.71 13.1 122.672 13.1 120.596 cv
f
18.6979 123.71 mo
18.5299 123.71 18.3939 123.655 18.2889 123.548 cv
18.1839 123.439 18.1309 123.305 18.1309 123.143 cv
18.1309 122.975 18.1839 122.835 18.2889 122.724 cv
18.3939 122.613 18.5299 122.558 18.6979 122.558 cv
18.8719 122.558 19.0099 122.613 19.1119 122.724 cv
19.2139 122.835 19.2649 122.975 19.2649 123.143 cv
19.2589 123.311 19.2069 123.447 19.1079 123.552 cv
19.0089 123.657 18.8719 123.71 18.6979 123.71 cv
f
23.7204 118.274 mo
21.4794 118.274 li
21.3894 118.274 21.3264 118.291 21.2904 118.324 cv
21.2544 118.357 21.2304 118.427 21.2184 118.535 cv
21.0114 120.218 li
21.0294 120.236 li
21.1794 120.098 21.3754 119.984 21.6184 119.894 cv
21.8624 119.804 22.1034 119.759 22.3434 119.759 cv
22.9014 119.759 23.3514 119.924 23.6934 120.254 cv
24.0354 120.585 24.2064 121.055 24.2064 121.668 cv
24.2064 122.273 24.0234 122.765 23.6574 123.143 cv
23.2914 123.521 22.7544 123.711 22.0464 123.711 cv
21.5064 123.711 21.0714 123.599 20.7414 123.378 cv
20.4114 123.155 20.2464 122.924 20.2464 122.684 cv
20.2464 122.546 20.3004 122.432 20.4084 122.342 cv
20.5164 122.253 20.6214 122.208 20.7234 122.208 cv
20.8434 122.208 20.9274 122.279 20.9754 122.423 cv
21.2034 123.071 21.5814 123.395 22.1094 123.395 cv
22.4874 123.395 22.7754 123.246 22.9734 122.945 cv
23.1714 122.645 23.2704 122.253 23.2704 121.766 cv
23.2704 121.22 23.1524 120.815 22.9144 120.551 cv
22.6784 120.287 22.3944 120.155 22.0644 120.155 cv
21.6144 120.155 21.2034 120.368 20.8314 120.795 cv
20.6154 120.686 li
20.7954 117.671 li
20.8854 117.59 li
23.8914 117.59 li
23.9364 117.662 li
cp
f
183.066 82.5203 mo
181.475 82.5203 li
26.9586 82.5203 mo
28.5056 82.5203 li
@
23.6896 81.5813 mo
23.6896 79.7153 23.3236 78.7823 22.5916 78.7823 cv
21.8596 78.7823 21.4936 79.7153 21.4936 81.5813 cv
21.4936 83.4473 21.8596 84.3803 22.5916 84.3803 cv
23.3236 84.3803 23.6896 83.4473 23.6896 81.5813 cv
20.5756 81.5813 mo
20.5756 79.5053 21.2476 78.4673 22.5916 78.4673 cv
23.9356 78.4673 24.6076 79.5053 24.6076 81.5813 cv
24.6076 83.6573 23.9356 84.6953 22.5916 84.6953 cv
21.2476 84.6953 20.5756 83.6573 20.5756 81.5813 cv
f
183.066 43.5086 mo
181.475 43.5086 li
26.9586 43.5086 mo
28.5056 43.5086 li
@
16.7487 42.5686 mo
16.7487 40.7026 16.3827 39.7696 15.6507 39.7696 cv
14.9187 39.7696 14.5527 40.7026 14.5527 42.5686 cv
14.5527 44.4346 14.9187 45.3676 15.6507 45.3676 cv
16.3827 45.3676 16.7487 44.4346 16.7487 42.5686 cv
13.6347 42.5686 mo
13.6347 40.4926 14.3067 39.4546 15.6507 39.4546 cv
16.9947 39.4546 17.6667 40.4926 17.6667 42.5686 cv
17.6667 44.6446 16.9947 45.6826 15.6507 45.6826 cv
14.3067 45.6826 13.6347 44.6446 13.6347 42.5686 cv
f
19.2326 45.6824 mo
19.0646 45.6824 18.9286 45.6284 18.8236 45.5204 cv
18.7186 45.4124 18.6656 45.2774 18.6656 45.1154 cv
18.6656 44.9474 18.7186 44.8074 18.8236 44.6974 cv
18.9286 44.5864 19.0646 44.5304 19.2326 44.5304 cv
19.4066 44.5304 19.5446 44.5864 19.6466 44.6974 cv
19.7486 44.8074 19.7996 44.9474 19.7996 45.1154 cv
19.7936 45.2834 19.7416 45.4204 19.6426 45.5254 cv
19.5436 45.6294 19.4066 45.6824 19.2326 45.6824 cv
f
24.2545 40.2464 mo
22.0135 40.2464 li
21.9235 40.2464 21.8605 40.2634 21.8245 40.2964 cv
21.7885 40.3294 21.7645 40.3994 21.7525 40.5074 cv
21.5455 42.1904 li
21.5635 42.2084 li
21.7135 42.0704 21.9095 41.9564 22.1525 41.8664 cv
22.3965 41.7764 22.6375 41.7314 22.8775 41.7314 cv
23.4355 41.7314 23.8855 41.8964 24.2275 42.2264 cv
24.5695 42.5564 24.7405 43.0274 24.7405 43.6394 cv
24.7405 44.2454 24.5575 44.7374 24.1915 45.1154 cv
23.8255 45.4934 23.2885 45.6824 22.5805 45.6824 cv
22.0405 45.6824 21.6055 45.5714 21.2755 45.3494 cv
20.9455 45.1274 20.7805 44.8964 20.7805 44.6564 cv
20.7805 44.5184 20.8345 44.4044 20.9425 44.3144 cv
21.0505 44.2244 21.1555 44.1794 21.2575 44.1794 cv
21.3775 44.1794 21.4615 44.2514 21.5095 44.3954 cv
21.7375 45.0434 22.1155 45.3674 22.6435 45.3674 cv
23.0215 45.3674 23.3095 45.2174 23.5075 44.9174 cv
23.7055 44.6174 23.8045 44.2244 23.8045 43.7384 cv
23.8045 43.1924 23.6865 42.7874 23.4485 42.5234 cv
23.2125 42.2594 22.9285 42.1274 22.5985 42.1274 cv
22.1485 42.1274 21.7375 42.3404 21.3655 42.7664 cv
21.1495 42.6584 li
21.3295 39.6434 li
21.4195 39.5624 li
24.4255 39.5624 li
24.4705 39.6344 li
cp
f
183.066 4.54269 mo
181.475 4.54269 li
26.9586 4.54269 mo
28.5056 4.54269 li
@
23.9269 7.61349 mo
20.9749 7.61349 li
20.9749 7.35251 li
21.7309 7.28952 li
21.8329 7.2775 21.9049 7.24451 21.9469 7.19052 cv
22.0009 7.13052 22.0279 7.01651 22.0279 6.84851 cv
22.0279 2.48352 li
22.0279 2.35751 22.0109 2.27051 21.9779 2.2225 cv
21.9459 2.1745 21.8899 2.1445 21.8119 2.13251 cv
20.9749 2.03351 li
20.9749 1.8085 li
22.8289 1.4935 li
22.8739 1.54752 li
22.8739 6.84851 li
22.8739 7.0105 22.8979 7.12152 22.9459 7.18152 cv
22.9939 7.24152 23.0689 7.2775 23.1709 7.28952 cv
23.9269 7.35251 li
cp
f
1 lw
1 lc
4 ml
183.066 160.544 mo
183.066 4.54318 li
26.9586 160.544 mo
26.9586 4.54318 li
26.9586 4.54318 mo
183.066 4.54318 li
26.9586 160.544 mo
183.066 160.544 li
@
0 lc
10 ml
40.6696 160.592 mo
40.9706 160.076 li
41.7866 158.807 li
42.5606 157.537 li
43.3346 156.316 li
44.1076 155.046 li
44.8816 153.824 li
45.6556 152.65 li
46.4726 151.427 li
47.2456 150.251 li
48.0196 149.077 li
48.7936 147.903 li
49.5666 146.727 li
50.3406 145.599 li
51.1136 144.423 li
51.9306 143.295 li
52.7046 142.214 li
53.4776 141.086 li
54.2526 140.005 li
55.0256 138.924 li
55.7986 137.842 li
56.6156 136.762 li
57.3886 135.682 li
58.1636 134.648 li
58.9366 133.613 li
59.7106 132.58 li
60.4836 131.545 li
61.3006 130.51 li
62.0746 129.523 li
62.8476 128.537 li
63.6216 127.549 li
64.3956 126.562 li
65.1686 125.575 li
65.9856 124.587 li
66.7596 123.648 li
67.5326 122.709 li
68.3066 121.722 li
69.0806 120.781 li
69.8546 119.889 li
70.6276 118.948 li
71.4436 118.007 li
72.2176 117.115 li
72.9916 116.223 li
73.7646 115.28 li
74.5386 114.39 li
75.3126 113.496 li
76.1286 112.65 li
76.9026 111.756 li
77.6756 110.863 li
78.4506 110.018 li
79.2236 109.124 li
79.9976 108.279 li
80.8146 107.432 li
81.5876 106.585 li
82.3616 105.74 li
83.1346 104.894 li
83.9086 104.048 li
84.6816 103.25 li
85.4986 102.404 li
86.2726 101.603 li
87.0456 100.757 li
87.8196 99.9581 li
88.5926 99.1131 li
89.3666 98.3151 li
90.1416 97.5141 li
90.9586 96.7151 li
91.7316 95.9161 li
92.5046 95.1171 li
93.2786 94.3191 li
94.0526 93.5201 li
94.8256 92.7191 li
95.6426 91.9211 li
96.4166 91.1221 li
97.1896 90.3221 li
97.9636 89.5711 li
98.7366 88.7721 li
99.5106 87.9741 li
100.328 87.2201 li
101.101 86.4221 li
101.875 85.6221 li
102.648 84.8711 li
103.421 84.0711 li
104.196 83.3201 li
105.012 82.5201 li
105.786 81.7211 li
106.559 80.9701 li
107.333 80.1711 li
108.107 79.4181 li
108.881 78.6191 li
109.655 77.8201 li
110.471 77.0681 li
111.245 76.2691 li
112.019 75.4701 li
112.793 74.7181 li
113.566 73.9181 li
114.339 73.1201 li
115.156 72.3211 li
115.93 71.5221 li
116.704 70.7241 li
117.477 69.9241 li
118.251 69.1241 li
119.024 68.3261 li
119.84 67.5281 li
120.615 66.7271 li
121.388 65.9291 li
122.162 65.0831 li
122.935 64.2841 li
123.71 63.4381 li
124.527 62.6391 li
125.3 61.7931 li
126.074 60.9931 li
126.847 60.1471 li
127.621 59.3011 li
128.394 58.4551 li
129.168 57.6091 li
129.985 56.7631 li
130.758 55.9161 li
131.532 55.0241 li
132.305 54.1781 li
133.079 53.2851 li
133.852 52.3921 li
134.67 51.5461 li
135.443 50.6521 li
136.216 49.7601 li
136.99 48.8191 li
137.763 47.9261 li
138.538 47.0331 li
139.355 46.0931 li
140.128 45.1531 li
140.902 44.2601 li
141.675 43.3201 li
142.449 42.3331 li
143.222 41.3931 li
144.04 40.4531 li
144.813 39.4661 li
145.587 38.4781 li
146.36 37.4921 li
147.133 36.5051 li
147.908 35.5171 li
148.681 34.5301 li
149.498 33.4961 li
150.271 32.4621 li
151.045 31.4281 li
151.819 30.3941 li
152.592 29.3601 li
153.366 28.2791 li
154.182 27.1981 li
154.957 26.1171 li
155.731 25.0361 li
156.504 23.9551 li
157.278 22.8271 li
158.051 21.7451 li
158.868 20.6171 li
159.641 19.4431 li
160.416 18.3151 li
161.189 17.1391 li
161.962 15.9651 li
162.736 14.7891 li
163.552 13.6141 li
164.327 12.3921 li
165.1 11.2171 li
165.874 9.99509 li
166.647 8.72607 li
167.42 7.50308 li
168.194 6.23508 li
169.011 4.96606 li
169.269 4.54309 li
/1 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
@
[3 1 ] 0 dsh
26.9586 160.544 mo
27.7326 159.746 li
28.5056 158.947 li
29.2796 158.195 li
30.0536 157.396 li
30.8276 156.644 li
31.6006 155.846 li
32.4166 155.046 li
33.1906 154.294 li
33.9646 153.494 li
34.7386 152.743 li
35.5116 151.943 li
36.2856 151.145 li
37.1026 150.393 li
37.8756 149.594 li
38.6496 148.841 li
39.4236 148.042 li
40.1966 147.244 li
40.9706 146.492 li
41.7866 145.692 li
42.5606 144.94 li
43.3346 144.142 li
44.1076 143.343 li
44.8816 142.59 li
45.6556 141.791 li
46.4726 141.04 li
47.2456 140.24 li
48.0196 139.441 li
48.7926 138.689 li
49.5666 137.891 li
50.3406 137.137 li
51.1136 136.339 li
51.9306 135.541 li
52.7046 134.788 li
53.4776 133.989 li
54.2516 133.236 li
55.0256 132.439 li
55.7986 131.639 li
56.6156 130.887 li
57.3886 130.087 li
58.1636 129.336 li
58.9366 128.537 li
59.7096 127.784 li
60.4836 126.985 li
61.3006 126.187 li
62.0746 125.434 li
62.8476 124.636 li
63.6216 123.883 li
64.3956 123.085 li
65.1686 122.284 li
65.9856 121.533 li
66.7596 120.733 li
67.5326 119.982 li
68.3066 119.184 li
69.0806 118.383 li
69.8546 117.633 li
70.6276 116.832 li
71.4436 116.081 li
72.2176 115.28 li
72.9916 114.482 li
73.7646 113.73 li
74.5386 112.931 li
75.3126 112.179 li
76.1286 111.38 li
76.9026 110.581 li
77.6756 109.828 li
78.4506 109.03 li
79.2236 108.278 li
79.9976 107.479 li
80.8136 106.68 li
81.5876 105.928 li
82.3616 105.129 li
83.1346 104.377 li
83.9086 103.577 li
84.6816 102.779 li
85.4986 102.025 li
86.2726 101.228 li
87.0456 100.475 li
87.8196 99.6772 li
88.5926 98.8792 li
89.3666 98.1252 li
90.1416 97.3272 li
90.9586 96.5742 li
91.7316 95.7752 li
92.5046 95.0232 li
93.2786 94.2252 li
94.0526 93.4262 li
94.8256 92.6732 li
95.6426 91.8742 li
96.4166 91.1222 li
97.1896 90.3222 li
97.9636 89.5232 li
98.7366 88.7722 li
99.5106 87.9742 li
100.328 87.2202 li
101.101 86.4222 li
101.875 85.6222 li
102.648 84.8712 li
103.421 84.0712 li
104.196 83.3202 li
105.012 82.5202 li
105.786 81.7212 li
106.559 80.9702 li
107.333 80.1712 li
108.107 79.4182 li
108.881 78.6192 li
109.655 77.8212 li
110.471 77.0672 li
111.245 76.2692 li
112.019 75.5182 li
112.792 74.7192 li
113.566 73.9182 li
114.339 73.1672 li
115.156 72.3682 li
115.93 71.6172 li
116.704 70.8162 li
117.477 70.0182 li
118.251 69.2662 li
119.024 68.4672 li
119.84 67.7142 li
120.615 66.9162 li
121.388 66.1632 li
122.162 65.3642 li
122.935 64.5662 li
123.709 63.8142 li
124.527 63.0142 li
125.3 62.2622 li
126.074 61.4632 li
126.847 60.6642 li
127.621 59.9122 li
128.394 59.1132 li
129.167 58.3612 li
129.985 57.5622 li
130.758 56.7632 li
131.532 56.0102 li
132.305 55.2112 li
133.079 54.4602 li
133.852 53.6602 li
134.669 52.8622 li
135.443 52.1092 li
136.216 51.3102 li
136.99 50.5582 li
137.763 49.7602 li
138.538 48.9602 li
139.355 48.2082 li
140.128 47.4102 li
140.902 46.6572 li
141.675 45.8582 li
142.449 45.0592 li
143.222 44.3072 li
144.04 43.5082 li
144.813 42.7562 li
145.586 41.9572 li
146.36 41.1582 li
147.133 40.4062 li
147.908 39.6072 li
148.681 38.8552 li
149.498 38.0562 li
150.271 37.2562 li
151.044 36.5052 li
151.819 35.7052 li
152.592 34.9542 li
153.366 34.1542 li
154.182 33.4022 li
154.957 32.6042 li
155.731 31.8042 li
156.504 31.0522 li
157.278 30.2532 li
158.051 29.5012 li
158.868 28.7022 li
159.641 27.9032 li
160.416 27.1512 li
161.189 26.3522 li
161.962 25.6002 li
162.736 24.8012 li
163.552 24.0022 li
164.327 23.2502 li
165.1 22.4512 li
165.874 21.6982 li
166.647 20.8992 li
167.42 20.1012 li
168.194 19.3482 li
169.011 18.5492 li
169.786 17.7972 li
170.559 16.9992 li
171.333 16.2002 li
172.106 15.4472 li
172.879 14.6482 li
173.697 13.8972 li
174.47 13.0982 li
175.244 12.2972 li
176.017 11.5462 li
176.791 10.7472 li
177.564 9.99521 li
178.381 9.1962 li
179.155 8.39719 li
179.928 7.6452 li
180.702 6.84619 li
181.475 6.09421 li
182.249 5.29419 li
183.066 4.54318 li
@
1 lc
[0 2 ] 0 dsh
26.9586 107.197 mo
27.7326 106.445 li
28.5056 105.741 li
29.2796 105.034 li
30.0536 104.329 li
30.8276 103.673 li
31.6006 103.013 li
32.4166 102.357 li
33.1906 101.745 li
33.9646 101.087 li
34.7386 100.523 li
35.5116 99.9115 li
36.2856 99.3465 li
37.1026 98.7835 li
37.8756 98.2195 li
38.6496 97.6545 li
39.4236 97.1375 li
40.1966 96.6225 li
40.9706 96.1045 li
41.7866 95.6345 li
42.5606 95.1645 li
43.3346 94.6945 li
44.1076 94.2245 li
44.8816 93.8015 li
45.6556 93.3315 li
46.4726 92.9085 li
47.2456 92.5335 li
48.0196 92.1085 li
48.7926 91.7325 li
49.5666 91.3565 li
50.3406 90.9815 li
51.1136 90.6045 li
51.9306 90.2765 li
52.7046 89.9465 li
53.4776 89.6175 li
54.2516 89.2895 li
55.0256 89.0075 li
55.7986 88.6775 li
56.6156 88.3955 li
57.3886 88.1135 li
58.1636 87.8315 li
58.9366 87.5975 li
59.7096 87.3155 li
60.4836 87.0805 li
61.3006 86.8445 li
62.0746 86.6105 li
62.8476 86.4225 li
63.6216 86.1875 li
64.3956 85.9985 li
65.1686 85.8105 li
65.9856 85.6225 li
66.7596 85.4335 li
67.5326 85.2475 li
68.3066 85.0585 li
69.0806 84.9175 li
69.8546 84.7755 li
70.6276 84.6355 li
71.4436 84.4945 li
72.2176 84.3535 li
72.9916 84.2135 li
73.7646 84.1185 li
74.5386 83.9775 li
75.3126 83.8845 li
76.1286 83.7895 li
76.9026 83.6485 li
77.6756 83.5545 li
78.4506 83.5075 li
79.2236 83.4135 li
79.9976 83.3195 li
80.8136 83.2735 li
81.5876 83.1785 li
82.3616 83.1325 li
83.1346 83.0845 li
83.9086 82.9905 li
84.6816 82.9435 li
85.4986 82.8965 li
86.2726 82.8505 li
87.0456 82.8025 li
87.8196 82.8025 li
88.5926 82.7555 li
89.3666 82.7085 li
90.1416 82.7085 li
90.9586 82.6615 li
91.7316 82.6615 li
92.5046 82.6145 li
93.2786 82.6145 li
94.0526 82.5675 li
94.8256 82.5675 li
95.6426 82.5675 li
96.4166 82.5675 li
97.1896 82.5675 li
97.9636 82.5205 li
98.7366 82.5205 li
99.5106 82.5205 li
100.328 82.5205 li
101.101 82.5205 li
101.875 82.5205 li
102.648 82.5205 li
103.421 82.5205 li
104.196 82.5205 li
105.012 82.5205 li
105.786 82.5205 li
106.559 82.5205 li
107.333 82.5205 li
108.107 82.5205 li
108.881 82.5205 li
109.655 82.5205 li
110.471 82.5205 li
111.245 82.5205 li
112.019 82.5205 li
112.792 82.4735 li
113.566 82.4735 li
114.339 82.4735 li
115.156 82.4735 li
115.93 82.4735 li
116.704 82.4265 li
117.477 82.4265 li
118.251 82.3795 li
119.024 82.3795 li
119.84 82.3325 li
120.615 82.3325 li
121.388 82.2855 li
122.162 82.2385 li
122.935 82.2385 li
123.709 82.1915 li
124.527 82.1445 li
125.3 82.0965 li
126.074 82.0505 li
126.847 81.9565 li
127.621 81.9095 li
128.394 81.8625 li
129.167 81.7675 li
129.985 81.7215 li
130.758 81.6275 li
131.532 81.5325 li
132.305 81.4865 li
133.079 81.3925 li
133.852 81.2515 li
134.669 81.1565 li
135.443 81.0635 li
136.216 80.9225 li
136.99 80.8275 li
137.763 80.6865 li
138.538 80.5465 li
139.355 80.4055 li
140.128 80.2635 li
140.902 80.1235 li
141.675 79.9825 li
142.449 79.7945 li
143.222 79.6075 li
144.04 79.4185 li
144.813 79.2305 li
145.586 79.0425 li
146.36 78.8535 li
147.133 78.6195 li
147.908 78.4305 li
148.681 78.1965 li
149.498 77.9615 li
150.271 77.7265 li
151.044 77.4445 li
151.819 77.2095 li
152.592 76.9275 li
153.366 76.6455 li
154.182 76.3635 li
154.957 76.0345 li
155.731 75.7515 li
156.504 75.4235 li
157.278 75.0945 li
158.051 74.7655 li
158.868 74.4365 li
159.641 74.0595 li
160.416 73.6845 li
161.189 73.3075 li
161.962 72.9325 li
162.736 72.5095 li
163.552 72.1325 li
164.327 71.7095 li
165.1 71.2395 li
165.874 70.8165 li
166.647 70.3465 li
167.42 69.8765 li
168.194 69.4055 li
169.011 68.9365 li
169.786 68.4195 li
170.559 67.9035 li
171.333 67.3845 li
172.106 66.8215 li
172.879 66.2575 li
173.697 65.6935 li
174.47 65.1285 li
175.244 64.5185 li
176.017 63.9545 li
176.791 63.2965 li
177.564 62.6855 li
178.381 62.0265 li
179.155 61.3695 li
179.928 60.7115 li
180.702 60.0055 li
181.475 59.3015 li
182.249 58.5955 li
183.066 57.8435 li
@
176.138 148.418 mo
87.138 148.418 li
87.138 115.918 li
176.138 115.918 li
cp
0 0 0 0 cmyk
f
0 lc
0 lj
4 ml
[] 0 dsh
176.138 148.418 mo
87.138 148.418 li
87.138 115.918 li
176.138 115.918 li
cp
.75021 .679683 .670222 .90164 cmyk
@
1 lj
10 ml
91.0949 122.531 mo
106.218 122.531 li
@
[3 1 ] 0 dsh
91.0949 131.687 mo
106.218 131.687 li
@
1 lc
[0 2 ] 0 dsh
91.0949 140.802 mo
106.218 140.802 li
@
113.17 119.143 mo
113.17 124.219 li
113.17 124.471 113.215 124.623 113.305 124.678 cv
113.395 124.732 113.68 124.772 114.16 124.795 cv
114.16 125.056 li
111.289 125.056 li
111.289 124.795 li
111.768 124.772 112.053 124.732 112.143 124.678 cv
112.232 124.623 112.277 124.471 112.277 124.219 cv
112.277 119.143 li
111.748 119.143 li
111.225 119.143 110.883 119.215 110.721 119.36 cv
110.559 119.502 110.451 119.825 110.397 120.323 cv
110.127 120.323 li
110.127 118.829 li
115.32 118.829 li
115.32 120.323 li
115.051 120.323 li
114.996 119.825 114.889 119.502 114.727 119.36 cv
114.565 119.215 114.223 119.143 113.701 119.143 cv
cp
f
117.201 121.375 mo
116.996 121.723 116.894 122.215 116.894 122.851 cv
116.894 123.486 116.996 123.979 117.201 124.326 cv
117.404 124.675 117.709 124.849 118.109 124.849 cv
118.517 124.849 118.824 124.675 119.027 124.326 cv
119.232 123.979 119.334 123.486 119.334 122.851 cv
119.334 122.215 119.232 121.723 119.027 121.375 cv
118.824 121.027 118.517 120.853 118.109 120.853 cv
117.709 120.853 117.404 121.027 117.201 121.375 cv
118.109 120.537 mo
118.83 120.537 119.369 120.737 119.73 121.137 cv
120.09 121.535 120.269 122.107 120.269 122.851 cv
120.269 123.595 120.09 124.166 119.73 124.564 cv
119.369 124.965 118.83 125.164 118.109 125.164 cv
117.402 125.164 116.867 124.963 116.504 124.561 cv
116.14 124.158 115.959 123.589 115.959 122.851 cv
115.959 122.113 116.14 121.543 116.504 121.141 cv
116.867 120.738 117.402 120.537 118.109 120.537 cv
f
123.645 121.006 mo
122.485 121.006 li
122.485 123.796 li
122.485 124.396 122.682 124.695 123.079 124.695 cv
123.319 124.695 123.532 124.656 123.717 124.578 cv
123.79 124.768 li
123.364 125.031 122.979 125.164 122.637 125.164 cv
122.536 125.164 122.436 125.152 122.34 125.127 cv
122.245 125.104 122.139 125.061 122.026 124.997 cv
121.913 124.934 121.819 124.829 121.747 124.682 cv
121.674 124.535 121.639 124.354 121.639 124.138 cv
121.639 121.006 li
120.991 121.006 li
120.991 120.646 li
121.674 120.646 li
122.223 119.512 li
122.485 119.512 li
122.485 120.646 li
123.645 120.646 li
cp
f
126.895 123.769 mo
126.895 122.5 li
126.78 122.573 126.436 122.716 125.86 122.932 cv
125.608 123.028 125.428 123.137 125.319 123.26 cv
125.211 123.383 125.157 123.55 125.157 123.76 cv
125.157 124.036 125.229 124.26 125.37 124.43 cv
125.51 124.602 125.715 124.687 125.985 124.687 cv
126.213 124.687 126.422 124.616 126.612 124.471 cv
126.799 124.327 126.895 124.093 126.895 123.769 cv
127.706 121.735 mo
127.706 123.913 li
127.706 124.381 127.809 124.639 128.02 124.687 cv
128.145 124.723 128.299 124.72 128.479 124.678 cv
128.532 124.894 li
128.172 125.075 127.819 125.165 127.471 125.165 cv
127.321 125.165 127.204 125.12 127.12 125.03 cv
127.036 124.939 126.958 124.804 126.885 124.623 cv
126.358 124.972 125.911 125.152 125.545 125.165 cv
125.143 125.165 124.827 125.041 124.594 124.795 cv
124.364 124.549 124.249 124.247 124.249 123.886 cv
124.249 123.34 124.528 122.983 125.086 122.815 cv
125.176 122.786 125.319 122.742 125.512 122.684 cv
125.707 122.627 125.862 122.581 125.971 122.545 cv
126.082 122.509 126.211 122.465 126.354 122.415 cv
126.499 122.364 126.614 122.315 126.702 122.266 cv
126.788 122.218 126.852 122.173 126.895 122.131 cv
126.895 121.752 li
126.895 121.429 126.819 121.198 126.67 121.06 cv
126.52 120.922 126.34 120.853 126.129 120.853 cv
125.686 120.853 125.377 121.147 125.202 121.735 cv
125.155 121.903 125.059 121.987 124.915 121.987 cv
124.807 121.987 124.696 121.95 124.582 121.874 cv
124.467 121.799 124.411 121.696 124.411 121.564 cv
124.411 121.306 124.59 121.071 124.95 120.858 cv
125.311 120.645 125.737 120.538 126.229 120.538 cv
126.553 120.538 126.819 120.575 127.03 120.646 cv
127.239 120.718 127.389 120.819 127.479 120.948 cv
127.569 121.077 127.629 121.2 127.659 121.317 cv
127.69 121.434 127.706 121.573 127.706 121.735 cv
f
130.215 118.432 mo
130.215 124.273 li
130.215 124.501 130.246 124.639 130.311 124.687 cv
130.373 124.735 130.567 124.772 130.891 124.795 cv
130.891 125.056 li
128.694 125.056 li
128.694 124.795 li
129.018 124.772 129.211 124.735 129.276 124.687 cv
129.338 124.639 129.369 124.501 129.369 124.273 cv
129.369 119.278 li
129.369 119.11 129.352 119.002 129.315 118.953 cv
129.279 118.907 129.201 118.876 129.082 118.864 cv
128.738 118.828 li
128.738 118.603 li
130.152 118.377 li
cp
f
132.223 125.164 mo
132.055 125.164 131.918 125.109 131.813 125.002 cv
131.707 124.893 131.655 124.759 131.655 124.597 cv
131.655 124.429 131.707 124.289 131.813 124.178 cv
131.918 124.067 132.055 124.012 132.223 124.012 cv
132.397 124.012 132.534 124.067 132.637 124.178 cv
132.739 124.289 132.789 124.429 132.789 124.597 cv
132.784 124.765 132.731 124.901 132.631 125.006 cv
132.534 125.111 132.397 125.164 132.223 125.164 cv
132.223 121.798 mo
132.055 121.798 131.918 121.744 131.813 121.636 cv
131.707 121.527 131.655 121.39 131.655 121.222 cv
131.655 121.06 131.707 120.924 131.813 120.812 cv
131.918 120.701 132.055 120.645 132.223 120.645 cv
132.397 120.645 132.534 120.699 132.637 120.808 cv
132.739 120.916 132.789 121.054 132.789 121.222 cv
132.784 121.39 132.731 121.527 132.631 121.636 cv
132.534 121.744 132.397 121.798 132.223 121.798 cv
f
137.731 123.382 mo
137.635 122.992 137.545 122.666 137.461 122.405 cv
137.376 122.145 137.26 121.907 137.11 121.694 cv
136.96 121.482 136.795 121.375 136.614 121.375 cv
136.561 121.375 136.514 121.387 136.475 121.41 cv
136.436 121.435 136.405 121.474 136.381 121.528 cv
136.356 121.582 136.338 121.633 136.327 121.681 cv
136.315 121.729 136.301 121.792 136.286 121.869 cv
136.272 121.947 136.258 122.008 136.245 122.05 cv
135.94 122.05 li
135.94 121.623 136.001 121.266 136.124 120.975 cv
136.247 120.684 136.45 120.537 136.731 120.537 cv
136.954 120.537 137.157 120.766 137.338 121.222 cv
137.522 121.678 137.704 122.287 137.883 123.049 cv
139.036 120.646 li
139.971 120.646 li
138.18 124.39 li
138.487 125.722 138.838 126.388 139.233 126.388 cv
139.372 126.388 139.477 126.322 139.553 126.19 cv
139.627 126.058 139.667 125.899 139.667 125.713 cv
139.971 125.713 li
139.971 126.727 139.725 127.235 139.233 127.235 cv
138.819 127.235 138.419 126.394 138.028 124.714 cv
136.876 127.125 li
135.94 127.125 li
cp
f
140.861 123.535 mo
145.218 123.535 li
145.218 124.056 li
140.861 124.056 li
cp
140.861 121.555 mo
145.218 121.555 li
145.218 122.076 li
140.861 122.076 li
cp
f
147.9 123.382 mo
147.804 122.992 147.714 122.666 147.63 122.405 cv
147.545 122.145 147.429 121.907 147.279 121.694 cv
147.129 121.482 146.964 121.375 146.783 121.375 cv
146.73 121.375 146.683 121.387 146.644 121.41 cv
146.605 121.435 146.574 121.474 146.55 121.528 cv
146.525 121.582 146.507 121.633 146.496 121.681 cv
146.484 121.729 146.47 121.792 146.455 121.869 cv
146.441 121.947 146.427 122.008 146.414 122.05 cv
146.109 122.05 li
146.109 121.623 146.17 121.266 146.293 120.975 cv
146.416 120.684 146.619 120.537 146.9 120.537 cv
147.123 120.537 147.326 120.766 147.507 121.222 cv
147.691 121.678 147.873 122.287 148.052 123.049 cv
149.205 120.646 li
150.14 120.646 li
148.349 124.39 li
148.656 125.722 149.007 126.388 149.402 126.388 cv
149.541 126.388 149.646 126.322 149.722 126.19 cv
149.796 126.058 149.836 125.899 149.836 125.713 cv
150.14 125.713 li
150.14 126.727 149.894 127.235 149.402 127.235 cv
148.988 127.235 148.588 126.394 148.197 124.714 cv
147.045 127.125 li
146.109 127.125 li
cp
f
151.637 123.192 mo
151.637 126.596 li
151.637 126.729 151.655 126.81 151.692 126.838 cv
151.729 126.866 151.842 126.887 152.03 126.901 cv
152.03 127.053 li
150.75 127.053 li
150.75 126.901 li
150.94 126.887 151.051 126.866 151.088 126.838 cv
151.125 126.81 151.143 126.729 151.143 126.596 cv
151.143 123.684 li
151.143 123.587 151.133 123.524 151.112 123.496 cv
151.092 123.467 151.045 123.45 150.975 123.444 cv
150.776 123.422 li
150.776 123.292 li
151.6 123.161 li
cp
f
152.682 123.393 mo
152.741 123.332 152.817 123.301 152.912 123.301 cv
153.006 123.301 153.084 123.332 153.143 123.393 cv
153.202 123.455 153.233 123.533 153.233 123.627 cv
153.229 123.721 153.198 123.797 153.141 123.855 cv
153.082 123.913 153.006 123.942 152.912 123.942 cv
152.817 123.942 152.741 123.913 152.682 123.852 cv
152.621 123.793 152.592 123.717 152.592 123.627 cv
152.592 123.533 152.621 123.455 152.682 123.393 cv
152.303 124.55 mo
153.127 124.419 li
153.164 124.451 li
153.164 126.596 li
153.164 126.729 153.182 126.81 153.219 126.838 cv
153.256 126.866 153.37 126.887 153.557 126.901 cv
153.557 127.053 li
152.278 127.053 li
152.278 126.901 li
152.465 126.887 152.578 126.866 152.616 126.838 cv
152.653 126.81 152.67 126.729 152.67 126.596 cv
152.67 124.944 li
152.67 124.853 152.661 124.793 152.639 124.766 cv
152.618 124.738 152.573 124.718 152.502 124.707 cv
152.303 124.682 li
cp
f
156.41 125.253 mo
156.41 126.596 li
156.41 126.729 156.43 126.81 156.467 126.838 cv
156.502 126.865 156.615 126.887 156.805 126.9 cv
156.805 127.053 li
155.523 127.053 li
155.523 126.9 li
155.713 126.887 155.826 126.865 155.863 126.838 cv
155.898 126.81 155.918 126.729 155.918 126.596 cv
155.918 125.357 li
155.918 124.921 155.734 124.702 155.367 124.702 cv
155.234 124.702 155.111 124.738 155 124.81 cv
154.887 124.881 154.803 124.972 154.742 125.08 cv
154.707 125.15 154.689 125.246 154.689 125.369 cv
154.689 126.596 li
154.689 126.729 154.709 126.81 154.744 126.838 cv
154.781 126.865 154.894 126.887 155.084 126.9 cv
155.084 127.053 li
153.803 127.053 li
153.803 126.9 li
153.992 126.887 154.105 126.865 154.14 126.838 cv
154.178 126.81 154.197 126.729 154.197 126.596 cv
154.197 124.943 li
154.197 124.853 154.185 124.793 154.166 124.766 cv
154.144 124.737 154.099 124.718 154.029 124.707 cv
153.83 124.682 li
153.83 124.55 li
154.611 124.419 li
154.685 124.817 li
154.699 124.807 154.742 124.778 154.816 124.731 cv
154.889 124.684 154.935 124.654 154.953 124.645 cv
154.969 124.634 155.01 124.611 155.07 124.576 cv
155.131 124.541 155.178 124.519 155.207 124.508 cv
155.236 124.498 155.279 124.482 155.332 124.463 cv
155.387 124.444 155.437 124.432 155.488 124.427 cv
155.537 124.422 155.588 124.419 155.639 124.419 cv
155.881 124.419 156.07 124.492 156.207 124.639 cv
156.342 124.786 156.41 124.99 156.41 125.253 cv
f
157.27 123.067 mo
157.27 122.546 li
159.143 122.546 li
159.143 120.646 li
159.754 120.646 li
159.754 122.546 li
161.627 122.546 li
161.627 123.067 li
159.754 123.067 li
159.754 125.056 li
159.143 125.056 li
159.143 123.067 li
cp
f
164.309 123.382 mo
164.213 122.992 164.123 122.666 164.039 122.405 cv
163.954 122.145 163.838 121.907 163.688 121.694 cv
163.538 121.482 163.373 121.375 163.192 121.375 cv
163.139 121.375 163.092 121.387 163.053 121.41 cv
163.014 121.435 162.983 121.474 162.959 121.528 cv
162.934 121.582 162.916 121.633 162.905 121.681 cv
162.893 121.729 162.879 121.792 162.864 121.869 cv
162.85 121.947 162.836 122.008 162.823 122.05 cv
162.518 122.05 li
162.518 121.623 162.579 121.266 162.702 120.975 cv
162.825 120.684 163.028 120.537 163.309 120.537 cv
163.532 120.537 163.735 120.766 163.916 121.222 cv
164.1 121.678 164.282 122.287 164.461 123.049 cv
165.614 120.646 li
166.549 120.646 li
164.758 124.39 li
165.065 125.722 165.416 126.388 165.811 126.388 cv
165.95 126.388 166.055 126.322 166.131 126.19 cv
166.205 126.058 166.245 125.899 166.245 125.713 cv
166.549 125.713 li
166.549 126.727 166.303 127.235 165.811 127.235 cv
165.397 127.235 164.997 126.394 164.606 124.714 cv
163.454 127.125 li
162.518 127.125 li
cp
f
169.828 125.253 mo
169.828 126.596 li
169.828 126.729 169.848 126.81 169.885 126.838 cv
169.92 126.865 170.033 126.887 170.223 126.9 cv
170.223 127.053 li
168.941 127.053 li
168.941 126.9 li
169.131 126.887 169.244 126.865 169.281 126.838 cv
169.316 126.81 169.336 126.729 169.336 126.596 cv
169.336 125.357 li
169.336 124.921 169.152 124.702 168.785 124.702 cv
168.652 124.702 168.529 124.738 168.418 124.81 cv
168.305 124.881 168.221 124.972 168.16 125.08 cv
168.125 125.15 168.107 125.246 168.107 125.369 cv
168.107 126.596 li
168.107 126.729 168.127 126.81 168.162 126.838 cv
168.199 126.865 168.312 126.887 168.502 126.9 cv
168.502 127.053 li
167.221 127.053 li
167.221 126.9 li
167.41 126.887 167.523 126.865 167.558 126.838 cv
167.596 126.81 167.615 126.729 167.615 126.596 cv
167.615 124.943 li
167.615 124.853 167.603 124.793 167.584 124.766 cv
167.562 124.737 167.517 124.718 167.447 124.707 cv
167.248 124.682 li
167.248 124.55 li
168.029 124.419 li
168.103 124.817 li
168.117 124.807 168.16 124.778 168.234 124.731 cv
168.307 124.684 168.353 124.654 168.371 124.645 cv
168.387 124.634 168.428 124.611 168.488 124.576 cv
168.549 124.541 168.596 124.519 168.625 124.508 cv
168.654 124.498 168.697 124.482 168.75 124.463 cv
168.805 124.444 168.855 124.432 168.906 124.427 cv
168.955 124.422 169.006 124.419 169.057 124.419 cv
169.299 124.419 169.488 124.492 169.625 124.639 cv
169.76 124.786 169.828 124.99 169.828 125.253 cv
f
171.293 123.192 mo
171.293 126.596 li
171.293 126.729 171.311 126.81 171.348 126.838 cv
171.385 126.866 171.498 126.887 171.686 126.901 cv
171.686 127.053 li
170.406 127.053 li
170.406 126.901 li
170.596 126.887 170.707 126.866 170.744 126.838 cv
170.781 126.81 170.799 126.729 170.799 126.596 cv
170.799 123.684 li
170.799 123.587 170.789 123.524 170.768 123.496 cv
170.748 123.467 170.701 123.45 170.631 123.444 cv
170.432 123.422 li
170.432 123.292 li
171.256 123.161 li
cp
f
111.945 129.065 mo
111.945 133.376 li
111.945 133.604 111.961 133.762 111.99 133.852 cv
112.019 133.942 112.08 134.008 112.17 134.051 cv
112.326 134.111 112.646 134.141 113.133 134.141 cv
113.66 134.141 114.043 134.063 114.275 133.907 cv
114.509 133.751 114.67 133.397 114.754 132.844 cv
115.023 132.844 li
114.916 134.456 li
110.244 134.456 li
110.244 134.194 li
110.64 134.17 110.875 134.131 110.945 134.078 cv
111.017 134.024 111.054 133.871 111.054 133.619 cv
111.054 129.065 li
111.054 128.813 111.017 128.66 110.945 128.606 cv
110.875 128.551 110.64 128.512 110.244 128.489 cv
110.244 128.227 li
112.808 128.227 li
112.808 128.489 li
112.388 128.518 112.14 128.559 112.062 128.61 cv
111.984 128.661 111.945 128.813 111.945 129.065 cv
f
116.024 128.178 mo
116.126 128.073 116.256 128.02 116.419 128.02 cv
116.581 128.02 116.713 128.073 116.815 128.178 cv
116.917 128.283 116.967 128.416 116.967 128.578 cv
116.962 128.741 116.909 128.871 116.811 128.97 cv
116.712 129.069 116.581 129.118 116.419 129.118 cv
116.256 129.118 116.126 129.068 116.024 128.965 cv
115.92 128.864 115.87 128.735 115.87 128.578 cv
115.87 128.416 115.92 128.283 116.024 128.178 cv
115.376 130.162 mo
116.788 129.938 li
116.85 129.991 li
116.85 133.672 li
116.85 133.901 116.883 134.038 116.946 134.086 cv
117.008 134.135 117.202 134.17 117.526 134.194 cv
117.526 134.455 li
115.331 134.455 li
115.331 134.194 li
115.655 134.17 115.848 134.135 115.911 134.086 cv
115.973 134.038 116.004 133.901 116.004 133.672 cv
116.004 130.837 li
116.004 130.682 115.987 130.579 115.952 130.532 cv
115.915 130.483 115.836 130.45 115.717 130.432 cv
115.376 130.387 li
cp
f
122.42 131.368 mo
122.42 133.672 li
122.42 133.9 122.453 134.038 122.516 134.086 cv
122.578 134.135 122.772 134.17 123.096 134.193 cv
123.096 134.455 li
120.9 134.455 li
120.9 134.193 li
121.225 134.17 121.418 134.135 121.481 134.086 cv
121.543 134.038 121.574 133.9 121.574 133.672 cv
121.574 131.548 li
121.574 130.799 121.26 130.423 120.629 130.423 cv
120.402 130.423 120.191 130.484 120 130.607 cv
119.807 130.73 119.66 130.885 119.559 131.071 cv
119.498 131.191 119.469 131.355 119.469 131.566 cv
119.469 133.672 li
119.469 133.9 119.5 134.038 119.563 134.086 cv
119.627 134.135 119.82 134.17 120.145 134.193 cv
120.145 134.455 li
117.947 134.455 li
117.947 134.193 li
118.272 134.17 118.465 134.135 118.527 134.086 cv
118.592 134.038 118.623 133.9 118.623 133.672 cv
118.623 130.837 li
118.623 130.681 118.606 130.579 118.568 130.531 cv
118.533 130.482 118.455 130.45 118.334 130.431 cv
117.992 130.387 li
117.992 130.162 li
119.334 129.937 li
119.459 130.621 li
119.484 130.603 119.559 130.554 119.686 130.472 cv
119.811 130.391 119.889 130.342 119.918 130.324 cv
119.949 130.306 120.016 130.267 120.121 130.207 cv
120.227 130.146 120.305 130.107 120.356 130.09 cv
120.406 130.072 120.479 130.047 120.57 130.014 cv
120.664 129.98 120.752 129.959 120.836 129.951 cv
120.92 129.941 121.008 129.937 121.098 129.937 cv
121.512 129.937 121.836 130.062 122.07 130.314 cv
122.303 130.566 122.42 130.918 122.42 131.368 cv
f
124.617 131.746 mo
126.318 131.746 li
126.437 131.746 126.519 131.723 126.56 131.674 cv
126.603 131.626 126.623 131.555 126.623 131.458 cv
126.623 131.374 126.619 131.287 126.611 131.197 cv
126.601 131.107 126.578 131.002 126.539 130.882 cv
126.5 130.762 126.447 130.658 126.381 130.572 cv
126.314 130.484 126.222 130.41 126.101 130.347 cv
125.982 130.283 125.844 130.252 125.687 130.252 cv
125.472 130.252 125.285 130.31 125.131 130.428 cv
124.974 130.545 124.863 130.691 124.797 130.869 cv
124.73 131.045 124.683 131.206 124.658 131.35 cv
124.631 131.494 124.617 131.626 124.617 131.746 cv
127.199 132.088 mo
124.607 132.088 li
124.584 133.432 125.025 134.103 125.931 134.103 cv
126.256 134.103 126.517 134.019 126.719 133.851 cv
126.92 133.684 127.092 133.45 127.236 133.15 cv
127.506 133.294 li
127.219 134.135 126.633 134.557 125.75 134.562 cv
125.037 134.568 124.512 134.375 124.176 133.982 cv
123.84 133.59 123.672 133.023 123.672 132.286 cv
123.672 131.578 123.847 131.01 124.199 130.58 cv
124.549 130.152 125.064 129.937 125.742 129.937 cv
126.055 129.937 126.326 129.983 126.56 130.076 cv
126.795 130.17 126.972 130.282 127.096 130.414 cv
127.219 130.546 127.318 130.702 127.392 130.882 cv
127.469 131.062 127.515 131.219 127.533 131.35 cv
127.551 131.482 127.56 131.614 127.56 131.746 cv
127.56 131.975 127.439 132.088 127.199 132.088 cv
f
130.943 133.168 mo
130.943 131.898 li
130.83 131.971 130.484 132.115 129.908 132.331 cv
129.656 132.428 129.476 132.537 129.369 132.66 cv
129.261 132.783 129.207 132.949 129.207 133.159 cv
129.207 133.436 129.277 133.658 129.418 133.83 cv
129.558 134 129.765 134.086 130.035 134.086 cv
130.263 134.086 130.47 134.014 130.66 133.87 cv
130.849 133.727 130.943 133.492 130.943 133.168 cv
131.754 131.135 mo
131.754 133.313 li
131.754 133.78 131.859 134.038 132.068 134.086 cv
132.195 134.122 132.347 134.119 132.527 134.077 cv
132.582 134.293 li
132.222 134.473 131.867 134.563 131.519 134.563 cv
131.369 134.563 131.252 134.518 131.168 134.428 cv
131.084 134.338 131.007 134.203 130.935 134.023 cv
130.406 134.371 129.959 134.551 129.593 134.563 cv
129.191 134.563 128.875 134.439 128.644 134.193 cv
128.414 133.948 128.298 133.645 128.298 133.285 cv
128.298 132.739 128.576 132.383 129.134 132.214 cv
129.224 132.184 129.367 132.141 129.562 132.084 cv
129.757 132.027 129.91 131.98 130.021 131.943 cv
130.132 131.908 130.259 131.865 130.404 131.814 cv
130.548 131.763 130.664 131.713 130.75 131.665 cv
130.838 131.617 130.902 131.572 130.943 131.53 cv
130.943 131.152 li
130.943 130.828 130.869 130.598 130.718 130.459 cv
130.568 130.321 130.388 130.252 130.179 130.252 cv
129.734 130.252 129.425 130.546 129.252 131.135 cv
129.203 131.303 129.107 131.387 128.964 131.387 cv
128.855 131.387 128.744 131.349 128.63 131.273 cv
128.517 131.199 128.459 131.096 128.459 130.963 cv
128.459 130.705 128.64 130.47 129 130.256 cv
129.359 130.043 129.785 129.938 130.277 129.938 cv
130.601 129.938 130.869 129.973 131.078 130.045 cv
131.289 130.117 131.439 130.218 131.529 130.347 cv
131.619 130.476 131.679 130.599 131.709 130.716 cv
131.738 130.832 131.754 130.973 131.754 131.135 cv
f
134.266 129.938 mo
134.373 130.658 li
134.692 130.381 134.93 130.193 135.088 130.09 cv
135.248 129.989 135.405 129.938 135.561 129.938 cv
135.723 129.938 135.844 129.983 135.922 130.073 cv
135.998 130.163 136.037 130.264 136.037 130.378 cv
136.037 130.516 135.996 130.635 135.912 130.734 cv
135.829 130.833 135.733 130.882 135.623 130.882 cv
135.559 130.882 135.498 130.868 135.444 130.837 cv
135.204 130.706 135.018 130.639 134.887 130.639 cv
134.76 130.639 134.643 130.716 134.536 130.87 cv
134.428 131.022 134.373 131.254 134.373 131.567 cv
134.373 133.672 li
134.373 133.901 134.414 134.039 134.498 134.086 cv
134.582 134.135 134.827 134.17 135.229 134.194 cv
135.229 134.456 li
132.852 134.456 li
132.852 134.194 li
133.17 134.17 133.362 134.135 133.428 134.086 cv
133.495 134.039 133.528 133.901 133.528 133.672 cv
133.528 130.837 li
133.528 130.682 133.51 130.58 133.473 130.532 cv
133.438 130.483 133.36 130.451 133.239 130.432 cv
132.897 130.387 li
132.897 130.163 li
cp
f
137.262 134.563 mo
137.094 134.563 136.957 134.51 136.852 134.401 cv
136.748 134.293 136.696 134.159 136.696 133.997 cv
136.696 133.829 136.748 133.689 136.852 133.579 cv
136.957 133.467 137.094 133.412 137.262 133.412 cv
137.436 133.412 137.575 133.467 137.676 133.579 cv
137.778 133.689 137.828 133.829 137.828 133.997 cv
137.823 134.165 137.77 134.301 137.672 134.407 cv
137.573 134.51 137.436 134.563 137.262 134.563 cv
137.262 131.198 mo
137.094 131.198 136.957 131.143 136.852 131.036 cv
136.748 130.928 136.696 130.79 136.696 130.622 cv
136.696 130.459 136.748 130.323 136.852 130.211 cv
136.957 130.101 137.094 130.045 137.262 130.045 cv
137.436 130.045 137.575 130.1 137.676 130.208 cv
137.778 130.315 137.828 130.454 137.828 130.622 cv
137.823 130.79 137.77 130.928 137.672 131.036 cv
137.573 131.143 137.436 131.198 137.262 131.198 cv
f
142.77 132.781 mo
142.674 132.391 142.584 132.066 142.5 131.805 cv
142.416 131.544 142.299 131.307 142.149 131.094 cv
142 130.882 141.834 130.773 141.655 130.773 cv
141.6 130.773 141.553 130.786 141.514 130.811 cv
141.475 130.835 141.444 130.874 141.42 130.928 cv
141.397 130.98 141.379 131.033 141.366 131.081 cv
141.354 131.129 141.34 131.191 141.327 131.27 cv
141.311 131.348 141.297 131.408 141.286 131.45 cv
140.979 131.45 li
140.979 131.023 141.041 130.665 141.165 130.374 cv
141.288 130.083 141.489 129.938 141.772 129.938 cv
141.993 129.938 142.196 130.165 142.379 130.622 cv
142.563 131.078 142.743 131.686 142.924 132.449 cv
144.075 130.046 li
145.012 130.046 li
143.221 133.79 li
143.526 135.122 143.877 135.788 144.274 135.788 cv
144.411 135.788 144.518 135.721 144.592 135.59 cv
144.668 135.458 144.706 135.299 144.706 135.113 cv
145.012 135.113 li
145.012 136.126 144.766 136.634 144.274 136.634 cv
143.86 136.634 143.458 135.794 143.067 134.113 cv
141.916 136.526 li
140.979 136.526 li
cp
f
146.506 132.59 mo
146.506 135.996 li
146.506 136.129 146.524 136.209 146.561 136.236 cv
146.598 136.266 146.711 136.286 146.899 136.3 cv
146.899 136.452 li
145.619 136.452 li
145.619 136.3 li
145.809 136.286 145.92 136.266 145.957 136.236 cv
145.994 136.209 146.012 136.129 146.012 135.996 cv
146.012 133.084 li
146.012 132.986 146.002 132.923 145.981 132.895 cv
145.961 132.867 145.914 132.85 145.844 132.842 cv
145.645 132.821 li
145.645 132.69 li
146.469 132.559 li
cp
f
147.551 132.793 mo
147.61 132.731 147.686 132.701 147.781 132.701 cv
147.875 132.701 147.953 132.731 148.012 132.793 cv
148.071 132.854 148.102 132.932 148.102 133.025 cv
148.098 133.12 148.067 133.196 148.01 133.254 cv
147.951 133.313 147.875 133.341 147.781 133.341 cv
147.686 133.341 147.61 133.311 147.551 133.252 cv
147.49 133.191 147.461 133.117 147.461 133.025 cv
147.461 132.932 147.49 132.854 147.551 132.793 cv
147.172 133.949 mo
147.996 133.818 li
148.033 133.85 li
148.033 135.996 li
148.033 136.129 148.051 136.209 148.088 136.236 cv
148.125 136.266 148.239 136.286 148.426 136.3 cv
148.426 136.452 li
147.147 136.452 li
147.147 136.3 li
147.334 136.286 147.447 136.266 147.485 136.236 cv
147.522 136.209 147.539 136.129 147.539 135.996 cv
147.539 134.343 li
147.539 134.252 147.53 134.192 147.508 134.164 cv
147.487 134.137 147.442 134.117 147.371 134.107 cv
147.172 134.08 li
cp
f
151.281 134.653 mo
151.281 135.997 li
151.281 136.13 151.299 136.21 151.336 136.237 cv
151.373 136.266 151.486 136.287 151.674 136.3 cv
151.674 136.453 li
150.394 136.453 li
150.394 136.3 li
150.584 136.287 150.695 136.266 150.732 136.237 cv
150.769 136.21 150.787 136.13 150.787 135.997 cv
150.787 134.758 li
150.787 134.321 150.603 134.102 150.236 134.102 cv
150.103 134.102 149.982 134.137 149.869 134.21 cv
149.758 134.282 149.672 134.372 149.613 134.48 cv
149.578 134.549 149.56 134.646 149.56 134.768 cv
149.56 135.997 li
149.56 136.13 149.578 136.21 149.615 136.237 cv
149.652 136.266 149.765 136.287 149.953 136.3 cv
149.953 136.453 li
148.674 136.453 li
148.674 136.3 li
148.861 136.287 148.974 136.266 149.011 136.237 cv
149.049 136.21 149.066 136.13 149.066 135.997 cv
149.066 134.343 li
149.066 134.253 149.056 134.193 149.035 134.165 cv
149.013 134.137 148.968 134.118 148.898 134.108 cv
148.699 134.081 li
148.699 133.95 li
149.48 133.819 li
149.554 134.217 li
149.568 134.208 149.613 134.178 149.685 134.132 cv
149.76 134.084 149.804 134.055 149.822 134.045 cv
149.84 134.034 149.879 134.011 149.939 133.976 cv
150.002 133.941 150.047 133.919 150.076 133.908 cv
150.107 133.897 150.148 133.882 150.203 133.864 cv
150.258 133.844 150.308 133.832 150.357 133.827 cv
150.406 133.821 150.457 133.819 150.51 133.819 cv
150.752 133.819 150.939 133.892 151.076 134.04 cv
151.213 134.186 151.281 134.391 151.281 134.653 cv
f
110.234 137.627 mo
111.963 137.627 li
115.472 142.595 li
115.49 142.612 li
115.49 139.453 li
115.49 138.985 115.47 138.613 115.427 138.338 cv
115.404 138.164 115.336 138.051 115.226 138 cv
115.115 137.949 114.896 137.912 114.572 137.888 cv
114.572 137.627 li
116.707 137.627 li
116.707 137.888 li
116.441 137.905 116.259 137.941 116.156 137.996 cv
116.054 138.049 115.992 138.164 115.968 138.338 cv
115.925 138.613 115.904 138.985 115.904 139.453 cv
115.904 143.855 li
115.31 143.855 li
111.476 138.437 li
111.459 138.437 li
111.459 142.027 li
111.459 142.496 111.48 142.867 111.521 143.144 cv
111.547 143.317 111.613 143.43 111.724 143.481 cv
111.836 143.532 112.052 143.57 112.377 143.594 cv
112.377 143.855 li
110.244 143.855 li
110.244 143.594 li
110.507 143.576 110.691 143.539 110.793 143.485 cv
110.894 143.432 110.959 143.317 110.982 143.144 cv
111.023 142.867 111.045 142.496 111.045 142.027 cv
111.045 138.463 li
111.045 138.211 111.009 138.059 110.937 138.004 cv
110.865 137.951 110.63 137.912 110.234 137.888 cv
cp
f
118.631 140.174 mo
118.428 140.522 118.326 141.014 118.326 141.65 cv
118.326 142.285 118.428 142.778 118.631 143.125 cv
118.836 143.474 119.139 143.648 119.541 143.648 cv
119.949 143.648 120.254 143.474 120.459 143.125 cv
120.662 142.778 120.766 142.285 120.766 141.65 cv
120.766 141.014 120.662 140.522 120.459 140.174 cv
120.254 139.826 119.949 139.652 119.541 139.652 cv
119.139 139.652 118.836 139.826 118.631 140.174 cv
119.541 139.336 mo
120.26 139.336 120.801 139.536 121.16 139.936 cv
121.522 140.334 121.701 140.906 121.701 141.65 cv
121.701 142.394 121.522 142.965 121.16 143.363 cv
120.801 143.764 120.26 143.963 119.541 143.963 cv
118.832 143.963 118.297 143.762 117.934 143.36 cv
117.57 142.957 117.391 142.388 117.391 141.65 cv
117.391 140.912 117.57 140.342 117.934 139.94 cv
118.297 139.537 118.832 139.336 119.541 139.336 cv
f
126.902 140.768 mo
126.902 143.072 li
126.902 143.3 126.935 143.438 126.998 143.486 cv
127.06 143.534 127.254 143.571 127.578 143.594 cv
127.578 143.855 li
125.382 143.855 li
125.382 143.594 li
125.707 143.571 125.9 143.534 125.963 143.486 cv
126.025 143.438 126.056 143.3 126.056 143.072 cv
126.056 140.948 li
126.056 140.198 125.742 139.823 125.111 139.823 cv
124.884 139.823 124.673 139.885 124.482 140.007 cv
124.289 140.13 124.142 140.286 124.041 140.471 cv
123.98 140.591 123.951 140.756 123.951 140.965 cv
123.951 143.072 li
123.951 143.3 123.982 143.438 124.045 143.486 cv
124.109 143.534 124.302 143.571 124.627 143.594 cv
124.627 143.855 li
122.429 143.855 li
122.429 143.594 li
122.754 143.571 122.947 143.534 123.009 143.486 cv
123.074 143.438 123.105 143.3 123.105 143.072 cv
123.105 140.237 li
123.105 140.08 123.088 139.979 123.05 139.931 cv
123.015 139.883 122.937 139.85 122.816 139.832 cv
122.474 139.788 li
122.474 139.562 li
123.816 139.336 li
123.941 140.021 li
123.966 140.002 124.041 139.954 124.168 139.872 cv
124.293 139.791 124.371 139.743 124.4 139.724 cv
124.431 139.705 124.498 139.666 124.603 139.607 cv
124.709 139.547 124.787 139.508 124.838 139.49 cv
124.888 139.472 124.961 139.446 125.052 139.414 cv
125.146 139.38 125.234 139.36 125.318 139.35 cv
125.402 139.341 125.49 139.336 125.58 139.336 cv
125.994 139.336 126.318 139.463 126.552 139.715 cv
126.785 139.967 126.902 140.318 126.902 140.768 cv
f
129.414 137.231 mo
129.414 143.072 li
129.414 143.3 129.445 143.438 129.51 143.486 cv
129.572 143.534 129.766 143.571 130.09 143.594 cv
130.09 143.855 li
127.893 143.855 li
127.893 143.594 li
128.217 143.571 128.41 143.534 128.475 143.486 cv
128.537 143.438 128.568 143.3 128.568 143.072 cv
128.568 138.077 li
128.568 137.909 128.551 137.801 128.514 137.752 cv
128.478 137.706 128.4 137.675 128.281 137.663 cv
127.937 137.627 li
127.937 137.402 li
129.351 137.176 li
cp
f
131.205 137.577 mo
131.307 137.473 131.439 137.42 131.601 137.42 cv
131.764 137.42 131.894 137.473 131.998 137.577 cv
132.1 137.681 132.15 137.815 132.15 137.977 cv
132.144 138.14 132.092 138.269 131.992 138.369 cv
131.894 138.468 131.764 138.517 131.601 138.517 cv
131.439 138.517 131.307 138.467 131.205 138.364 cv
131.103 138.263 131.053 138.134 131.053 137.977 cv
131.053 137.815 131.103 137.681 131.205 137.577 cv
130.557 139.561 mo
131.971 139.336 li
132.033 139.39 li
132.033 143.071 li
132.033 143.3 132.064 143.437 132.127 143.485 cv
132.191 143.533 132.385 143.57 132.709 143.594 cv
132.709 143.854 li
130.512 143.854 li
130.512 143.594 li
130.836 143.57 131.029 143.533 131.092 143.485 cv
131.156 143.437 131.187 143.3 131.187 143.071 cv
131.187 140.236 li
131.187 140.08 131.17 139.978 131.133 139.931 cv
131.098 139.883 131.019 139.849 130.898 139.832 cv
130.557 139.787 li
cp
f
137.604 140.768 mo
137.604 143.072 li
137.604 143.3 137.637 143.438 137.7 143.486 cv
137.762 143.534 137.956 143.571 138.28 143.594 cv
138.28 143.855 li
136.084 143.855 li
136.084 143.594 li
136.409 143.571 136.602 143.534 136.665 143.486 cv
136.727 143.438 136.758 143.3 136.758 143.072 cv
136.758 140.948 li
136.758 140.198 136.444 139.823 135.813 139.823 cv
135.586 139.823 135.375 139.885 135.184 140.007 cv
134.991 140.13 134.844 140.286 134.743 140.471 cv
134.682 140.591 134.653 140.756 134.653 140.965 cv
134.653 143.072 li
134.653 143.3 134.684 143.438 134.747 143.486 cv
134.811 143.534 135.004 143.571 135.329 143.594 cv
135.329 143.855 li
133.131 143.855 li
133.131 143.594 li
133.456 143.571 133.649 143.534 133.711 143.486 cv
133.776 143.438 133.807 143.3 133.807 143.072 cv
133.807 140.237 li
133.807 140.08 133.79 139.979 133.752 139.931 cv
133.717 139.883 133.639 139.85 133.518 139.832 cv
133.176 139.788 li
133.176 139.562 li
134.518 139.336 li
134.643 140.021 li
134.668 140.002 134.743 139.954 134.87 139.872 cv
134.995 139.791 135.073 139.743 135.102 139.724 cv
135.133 139.705 135.2 139.666 135.305 139.607 cv
135.411 139.547 135.489 139.508 135.54 139.49 cv
135.59 139.472 135.663 139.446 135.754 139.414 cv
135.848 139.38 135.936 139.36 136.02 139.35 cv
136.104 139.341 136.192 139.336 136.282 139.336 cv
136.696 139.336 137.02 139.463 137.254 139.715 cv
137.487 139.967 137.604 140.318 137.604 140.768 cv
f
139.799 141.146 mo
141.5 141.146 li
141.621 141.146 141.701 141.122 141.744 141.075 cv
141.785 141.026 141.807 140.954 141.807 140.858 cv
141.807 140.774 141.803 140.687 141.793 140.597 cv
141.783 140.506 141.76 140.402 141.721 140.282 cv
141.682 140.163 141.629 140.059 141.565 139.971 cv
141.498 139.885 141.404 139.809 141.285 139.747 cv
141.164 139.684 141.028 139.652 140.871 139.652 cv
140.654 139.652 140.469 139.71 140.313 139.828 cv
140.156 139.944 140.045 140.092 139.981 140.268 cv
139.914 140.446 139.867 140.606 139.84 140.75 cv
139.813 140.894 139.799 141.026 139.799 141.146 cv
142.383 141.488 mo
139.791 141.488 li
139.766 142.833 140.207 143.504 141.113 143.504 cv
141.438 143.504 141.699 143.42 141.901 143.252 cv
142.102 143.084 142.276 142.85 142.418 142.549 cv
142.69 142.694 li
142.401 143.534 141.817 143.958 140.934 143.963 cv
140.219 143.969 139.695 143.776 139.36 143.382 cv
139.024 142.99 138.856 142.424 138.856 141.686 cv
138.856 140.978 139.029 140.41 139.381 139.981 cv
139.733 139.551 140.246 139.336 140.924 139.336 cv
141.237 139.336 141.51 139.383 141.744 139.477 cv
141.979 139.569 142.156 139.682 142.279 139.814 cv
142.403 139.946 142.502 140.102 142.576 140.282 cv
142.651 140.461 142.697 140.618 142.715 140.75 cv
142.735 140.881 142.742 141.014 142.742 141.146 cv
142.742 141.374 142.623 141.488 142.383 141.488 cv
f
146.127 142.568 mo
146.127 141.299 li
146.012 141.372 145.668 141.515 145.092 141.731 cv
144.84 141.827 144.66 141.936 144.551 142.059 cv
144.443 142.182 144.389 142.349 144.389 142.559 cv
144.389 142.835 144.461 143.059 144.602 143.229 cv
144.742 143.401 144.947 143.486 145.217 143.486 cv
145.445 143.486 145.654 143.415 145.844 143.27 cv
146.031 143.126 146.127 142.892 146.127 142.568 cv
146.938 140.534 mo
146.938 142.712 li
146.938 143.18 147.041 143.438 147.252 143.486 cv
147.377 143.522 147.531 143.519 147.711 143.477 cv
147.764 143.693 li
147.404 143.874 147.051 143.964 146.703 143.964 cv
146.553 143.964 146.436 143.919 146.352 143.829 cv
146.268 143.738 146.19 143.603 146.117 143.422 cv
145.59 143.771 145.143 143.951 144.777 143.964 cv
144.375 143.964 144.059 143.84 143.826 143.594 cv
143.596 143.348 143.481 143.046 143.481 142.685 cv
143.481 142.139 143.76 141.782 144.318 141.614 cv
144.408 141.585 144.551 141.541 144.744 141.483 cv
144.939 141.426 145.094 141.38 145.203 141.344 cv
145.314 141.308 145.443 141.264 145.586 141.214 cv
145.731 141.163 145.846 141.114 145.934 141.065 cv
146.02 141.017 146.084 140.972 146.127 140.93 cv
146.127 140.551 li
146.127 140.228 146.051 139.997 145.902 139.859 cv
145.752 139.721 145.572 139.652 145.361 139.652 cv
144.918 139.652 144.609 139.946 144.434 140.534 cv
144.387 140.702 144.291 140.786 144.147 140.786 cv
144.039 140.786 143.928 140.749 143.814 140.673 cv
143.699 140.598 143.643 140.495 143.643 140.363 cv
143.643 140.105 143.822 139.87 144.182 139.657 cv
144.543 139.444 144.969 139.337 145.461 139.337 cv
145.785 139.337 146.051 139.374 146.262 139.445 cv
146.471 139.517 146.621 139.618 146.711 139.747 cv
146.801 139.876 146.861 139.999 146.891 140.116 cv
146.922 140.233 146.938 140.372 146.938 140.534 cv
f
149.447 139.336 mo
149.554 140.057 li
149.873 139.781 150.111 139.592 150.271 139.489 cv
150.429 139.388 150.588 139.336 150.744 139.336 cv
150.906 139.336 151.025 139.381 151.103 139.472 cv
151.181 139.562 151.22 139.664 151.22 139.777 cv
151.22 139.916 151.177 140.034 151.093 140.133 cv
151.01 140.232 150.914 140.281 150.806 140.281 cv
150.74 140.281 150.679 140.267 150.627 140.236 cv
150.386 140.105 150.201 140.039 150.068 140.039 cv
149.943 140.039 149.826 140.115 149.717 140.268 cv
149.609 140.421 149.554 140.654 149.554 140.965 cv
149.554 143.071 li
149.554 143.3 149.597 143.438 149.681 143.485 cv
149.765 143.533 150.008 143.57 150.41 143.594 cv
150.41 143.855 li
148.035 143.855 li
148.035 143.594 li
148.351 143.57 148.545 143.533 148.611 143.485 cv
148.676 143.438 148.709 143.3 148.709 143.071 cv
148.709 140.236 li
148.709 140.08 148.691 139.979 148.656 139.931 cv
148.619 139.883 148.541 139.85 148.422 139.832 cv
148.08 139.787 li
148.08 139.562 li
cp
f
152.445 143.963 mo
152.277 143.963 152.14 143.908 152.035 143.801 cv
151.929 143.692 151.877 143.558 151.877 143.396 cv
151.877 143.228 151.929 143.088 152.035 142.977 cv
152.14 142.866 152.277 142.811 152.445 142.811 cv
152.619 142.811 152.756 142.866 152.859 142.977 cv
152.961 143.088 153.011 143.228 153.011 143.396 cv
153.006 143.564 152.953 143.7 152.853 143.805 cv
152.756 143.91 152.619 143.963 152.445 143.963 cv
152.445 140.597 mo
152.277 140.597 152.14 140.543 152.035 140.435 cv
151.929 140.326 151.877 140.189 151.877 140.021 cv
151.877 139.859 151.929 139.723 152.035 139.611 cv
152.14 139.5 152.277 139.444 152.445 139.444 cv
152.619 139.444 152.756 139.498 152.859 139.607 cv
152.961 139.715 153.011 139.853 153.011 140.021 cv
153.006 140.189 152.953 140.326 152.853 140.435 cv
152.756 140.543 152.619 140.597 152.445 140.597 cv
f
157.953 142.181 mo
157.857 141.791 157.767 141.465 157.683 141.204 cv
157.598 140.944 157.482 140.706 157.332 140.493 cv
157.182 140.281 157.017 140.174 156.836 140.174 cv
156.783 140.174 156.736 140.186 156.697 140.209 cv
156.658 140.234 156.627 140.273 156.603 140.327 cv
156.578 140.381 156.56 140.432 156.549 140.48 cv
156.537 140.528 156.523 140.591 156.508 140.668 cv
156.494 140.746 156.48 140.807 156.467 140.849 cv
156.162 140.849 li
156.162 140.422 156.223 140.065 156.346 139.774 cv
156.469 139.483 156.672 139.336 156.953 139.336 cv
157.176 139.336 157.379 139.565 157.56 140.021 cv
157.744 140.477 157.926 141.086 158.105 141.848 cv
159.258 139.445 li
160.193 139.445 li
158.402 143.189 li
158.709 144.521 159.06 145.187 159.455 145.187 cv
159.594 145.187 159.699 145.121 159.775 144.989 cv
159.849 144.857 159.889 144.698 159.889 144.512 cv
160.193 144.512 li
160.193 145.526 159.947 146.034 159.455 146.034 cv
159.041 146.034 158.641 145.193 158.25 143.513 cv
157.098 145.924 li
156.162 145.924 li
cp
f
163.473 144.052 mo
163.473 145.395 li
163.473 145.528 163.493 145.609 163.53 145.637 cv
163.565 145.664 163.678 145.686 163.868 145.699 cv
163.868 145.852 li
162.586 145.852 li
162.586 145.699 li
162.776 145.686 162.889 145.664 162.926 145.637 cv
162.961 145.609 162.981 145.528 162.981 145.395 cv
162.981 144.156 li
162.981 143.72 162.797 143.501 162.43 143.501 cv
162.297 143.501 162.174 143.537 162.063 143.609 cv
161.95 143.68 161.866 143.771 161.805 143.879 cv
161.77 143.949 161.752 144.045 161.752 144.168 cv
161.752 145.395 li
161.752 145.528 161.772 145.609 161.807 145.637 cv
161.844 145.664 161.957 145.686 162.147 145.699 cv
162.147 145.852 li
160.866 145.852 li
160.866 145.699 li
161.055 145.686 161.168 145.664 161.203 145.637 cv
161.241 145.609 161.26 145.528 161.26 145.395 cv
161.26 143.742 li
161.26 143.652 161.248 143.592 161.229 143.565 cv
161.207 143.536 161.162 143.517 161.092 143.506 cv
160.893 143.481 li
160.893 143.349 li
161.674 143.218 li
161.748 143.616 li
161.762 143.606 161.805 143.577 161.879 143.53 cv
161.952 143.483 161.998 143.453 162.016 143.444 cv
162.032 143.433 162.073 143.41 162.133 143.375 cv
162.194 143.34 162.241 143.318 162.27 143.307 cv
162.299 143.297 162.342 143.281 162.395 143.262 cv
162.45 143.243 162.5 143.231 162.551 143.226 cv
162.6 143.221 162.651 143.218 162.702 143.218 cv
162.944 143.218 163.133 143.291 163.27 143.438 cv
163.405 143.585 163.473 143.789 163.473 144.052 cv
f
164.936 141.99 mo
164.936 145.395 li
164.936 145.527 164.956 145.608 164.993 145.637 cv
165.03 145.664 165.141 145.685 165.331 145.699 cv
165.331 145.852 li
164.049 145.852 li
164.049 145.699 li
164.239 145.685 164.352 145.664 164.389 145.637 cv
164.426 145.608 164.444 145.527 164.444 145.395 cv
164.444 142.482 li
164.444 142.385 164.434 142.322 164.413 142.294 cv
164.391 142.266 164.346 142.249 164.276 142.242 cv
164.077 142.22 li
164.077 142.09 li
164.901 141.96 li
cp
f
7.61388 113.271 mo
7.61388 116.061 li
7.27187 116.061 li
7.25987 115.737 7.22588 115.538 7.16887 115.462 cv
7.11186 115.387 6.96887 115.35 6.74088 115.35 cv
2.27687 115.35 li
2.27687 115.376 li
7.45187 117.258 li
7.45187 117.797 li
2.27687 119.732 li
2.27687 119.759 li
5.34587 119.759 li
6.01187 119.759 6.47987 119.744 6.74986 119.713 cv
6.91187 119.702 7.03087 119.667 7.10587 119.611 cv
7.17987 119.553 7.22087 119.461 7.22687 119.335 cv
7.27187 118.85 li
7.61388 118.85 li
7.61388 121 li
7.27187 121 li
7.22687 120.686 li
7.20287 120.494 7.04387 120.386 6.74986 120.362 cv
6.48587 120.332 6.01787 120.317 5.34587 120.317 cv
2.25887 120.317 li
2.03087 120.317 1.88786 120.354 1.83087 120.429 cv
1.77487 120.504 1.73987 120.704 1.72787 121.028 cv
1.38586 121.028 li
1.38586 118.652 li
1.58987 118.592 2.03087 118.433 2.70886 118.175 cv
5.47186 117.105 li
5.47186 117.078 li
3.36588 116.313 li
1.38586 115.611 li
1.38586 113.271 li
1.72787 113.271 li
1.73987 113.595 1.77487 113.794 1.83087 113.87 cv
1.88786 113.945 2.03087 113.982 2.25887 113.982 cv
6.74088 113.982 li
6.96887 113.982 7.11186 113.945 7.16887 113.87 cv
7.22588 113.794 7.25987 113.595 7.27187 113.271 cv
cp
f
3.20378 109.77 mo
3.20378 107.961 li
3.54578 107.961 li
3.56377 108.15 li
3.57578 108.27 3.62378 108.363 3.70778 108.429 cv
3.79178 108.496 3.93877 108.573 4.14877 108.664 cv
5.78677 109.341 7.12178 109.873 8.15378 110.256 cv
8.77777 110.49 9.20677 110.721 9.44078 110.949 cv
9.67477 111.177 9.79178 111.453 9.79178 111.777 cv
9.79178 111.963 9.73978 112.131 9.63478 112.281 cv
9.52977 112.431 9.39278 112.506 9.22478 112.506 cv
9.05078 112.506 8.88577 112.446 8.72977 112.326 cv
8.57378 112.207 8.49577 112.074 8.49577 111.93 cv
8.49577 111.834 8.55878 111.699 8.68477 111.525 cv
8.77478 111.417 8.81978 111.309 8.81978 111.201 cv
8.81978 111.045 8.67278 110.928 8.37877 110.85 cv
8.19278 110.802 7.99477 110.82 7.78477 110.904 cv
3.95978 112.443 li
3.74377 112.533 3.62077 112.647 3.59077 112.785 cv
3.54578 113.083 li
3.20378 113.083 li
3.20378 110.562 li
3.54578 110.562 li
3.59978 110.904 li
3.61777 111.042 3.71677 111.079 3.89677 111.012 cv
4.22678 110.904 4.70078 110.735 5.31877 110.503 cv
5.93677 110.273 6.29977 110.139 6.40778 110.103 cv
6.40778 110.085 li
5.05777 109.641 4.21178 109.369 3.86977 109.266 cv
3.70778 109.224 3.61777 109.269 3.59978 109.401 cv
3.54578 109.77 li
cp
f
7.61388 103.505 mo
7.61388 104.495 li
5.67886 105.197 li
4.80287 105.522 4.22386 105.74 3.94186 105.855 cv
3.79787 105.914 3.69887 105.984 3.64487 106.062 cv
3.59087 106.14 3.55786 106.266 3.54587 106.44 cv
3.20387 106.44 li
3.20387 104.054 li
3.54587 104.054 li
3.59087 104.387 li
3.59686 104.465 3.62086 104.514 3.66287 104.531 cv
3.70486 104.549 3.76787 104.543 3.85187 104.514 cv
6.42587 103.631 li
6.42587 103.595 li
5.15387 103.169 4.30786 102.9 3.88786 102.785 cv
3.71387 102.737 3.61787 102.785 3.59987 102.929 cv
3.54587 103.317 li
3.20387 103.317 li
3.20387 101.453 li
3.54587 101.453 li
3.55786 101.646 3.58687 101.778 3.63187 101.854 cv
3.67587 101.929 3.77687 102.002 3.93286 102.074 cv
4.32887 102.273 4.84787 102.488 5.48987 102.723 cv
cp
f
6.40788 98.7092 mo
5.10287 98.7092 li
5.32487 99.2002 5.45088 99.4712 5.48088 99.5192 cv
5.63687 99.7952 5.89787 99.9332 6.26387 99.9332 cv
6.49188 99.9332 6.67488 99.8682 6.81288 99.7392 cv
6.95088 99.6102 7.01988 99.4522 7.01988 99.2672 cv
7.01988 99.1222 6.97287 98.9952 6.88087 98.8842 cv
6.78688 98.7732 6.62987 98.7152 6.40788 98.7092 cv
7.15488 96.6652 mo
7.45187 96.6392 li
7.63188 97.0952 7.72188 97.5382 7.72188 97.9712 cv
7.72188 98.1692 7.67688 98.3172 7.58687 98.4162 cv
7.49687 98.5152 7.36787 98.6012 7.19987 98.6732 cv
7.21187 98.6902 7.24287 98.7372 7.29488 98.8122 cv
7.34587 98.8872 7.37987 98.9392 7.39787 98.9702 cv
7.41588 99.0002 7.44588 99.0522 7.48787 99.1272 cv
7.52988 99.2022 7.56187 99.2652 7.58188 99.3162 cv
7.60388 99.3672 7.62787 99.4302 7.65488 99.5052 cv
7.68088 99.5802 7.69987 99.6552 7.70888 99.7302 cv
7.71788 99.8052 7.72188 99.8822 7.72188 99.9602 cv
7.72188 100.392 7.59488 100.726 7.33987 100.963 cv
7.08487 101.2 6.77687 101.318 6.41687 101.318 cv
5.88287 101.318 5.50787 101.001 5.29187 100.364 cv
5.26787 100.299 5.22787 100.18 5.17087 100.009 cv
5.11388 99.8382 5.06987 99.7042 5.03987 99.6082 cv
5.00987 99.5132 4.96988 99.3982 4.91887 99.2672 cv
4.86688 99.1352 4.82088 99.0232 4.77887 98.9342 cv
4.73688 98.8442 4.69487 98.7692 4.65288 98.7092 cv
4.17587 98.7092 li
3.73187 98.7092 3.50987 98.8832 3.50987 99.2302 cv
3.50987 99.5612 3.80988 99.8242 4.40988 100.022 cv
4.64987 100.101 4.76988 100.224 4.76988 100.392 cv
4.76988 100.554 4.71988 100.729 4.62088 100.918 cv
4.52287 101.107 4.38287 101.201 4.20288 101.201 cv
3.89688 101.201 3.63588 101.007 3.41988 100.616 cv
3.20387 100.227 3.09587 99.7112 3.09587 99.0682 cv
3.09587 98.7632 3.12288 98.5002 3.17688 98.2812 cv
3.23088 98.0632 3.29688 97.8972 3.37488 97.7862 cv
3.45288 97.6752 3.55388 97.5882 3.67688 97.5252 cv
3.79988 97.4622 3.90887 97.4232 4.00487 97.4082 cv
4.10088 97.3942 4.21788 97.3862 4.35588 97.3862 cv
6.43488 97.3862 li
6.82487 97.3862 7.04988 97.2902 7.10988 97.0982 cv
7.15187 96.9722 7.16687 96.8272 7.15488 96.6652 cv
f
4.81508 94.6145 mo
6.83107 94.6145 li
7.01707 94.6145 7.13206 94.5735 7.17708 94.4925 cv
7.22208 94.4115 7.25407 94.1945 7.27206 93.8405 cv
7.61407 93.8405 li
7.61407 96.5575 li
7.27206 96.5575 li
7.26007 96.3005 7.23007 96.1375 7.18207 96.0725 cv
7.13406 96.0065 7.01707 95.9725 6.83107 95.9725 cv
4.18507 95.9725 li
4.01108 95.9725 3.89407 95.9895 3.83408 96.0225 cv
3.77408 96.0555 3.73807 96.1115 3.72607 96.1895 cv
3.68108 96.5045 li
3.35707 96.5045 li
3.09607 94.7495 li
3.88808 94.6405 li
3.59407 94.3655 3.38808 94.1415 3.27206 93.9705 cv
3.15407 93.8005 3.09607 93.6245 3.09607 93.4445 cv
3.09607 93.2525 3.15308 93.0985 3.26707 92.9855 cv
3.38107 92.8715 3.53407 92.8145 3.72607 92.8145 cv
3.93607 92.8145 4.10707 92.8625 4.23907 92.9585 cv
4.39507 93.0725 4.47307 93.2245 4.47307 93.4175 cv
4.47307 93.5375 4.42506 93.6755 4.32907 93.8315 cv
4.20306 94.0475 4.14008 94.2065 4.14008 94.3075 cv
4.14008 94.5115 4.36507 94.6145 4.81508 94.6145 cv
f
6.83069 92.013 mo
4.18468 92.013 li
4.01068 92.013 3.89368 92.03 3.83368 92.063 cv
3.77368 92.096 3.73769 92.152 3.72568 92.23 cv
3.68068 92.544 li
3.35667 92.544 li
3.09569 90.717 li
3.14967 90.655 li
6.83069 90.655 li
7.01668 90.655 7.13368 90.621 7.18169 90.555 cv
7.22968 90.49 7.25967 90.327 7.27168 90.07 cv
7.61368 90.07 li
7.61368 92.598 li
7.27168 92.598 li
7.25967 92.34 7.22968 92.178 7.18169 92.113 cv
7.13368 92.046 7.01668 92.013 6.83069 92.013 cv
2.70868 91.383 mo
2.70868 91.629 2.63268 91.827 2.47968 91.977 cv
2.32668 92.127 2.13869 92.202 1.91669 92.202 cv
1.70068 92.202 1.51668 92.127 1.36368 91.977 cv
1.21068 91.827 1.13368 91.629 1.13368 91.383 cv
1.13368 91.137 1.20868 90.938 1.35869 90.784 cv
1.50868 90.632 1.69469 90.555 1.91669 90.555 cv
2.13869 90.555 2.32668 90.633 2.47968 90.789 cv
2.63268 90.946 2.70868 91.144 2.70868 91.383 cv
f
6.40788 87.01 mo
5.10287 87.01 li
5.32487 87.501 5.45088 87.772 5.48088 87.82 cv
5.63687 88.096 5.89787 88.234 6.26387 88.234 cv
6.49188 88.234 6.67488 88.169 6.81288 88.04 cv
6.95088 87.911 7.01988 87.753 7.01988 87.568 cv
7.01988 87.423 6.97287 87.296 6.88087 87.185 cv
6.78688 87.074 6.62987 87.016 6.40788 87.01 cv
7.15488 84.966 mo
7.45187 84.94 li
7.63188 85.396 7.72188 85.839 7.72188 86.272 cv
7.72188 86.47 7.67688 86.618 7.58687 86.717 cv
7.49687 86.816 7.36787 86.902 7.19987 86.974 cv
7.21187 86.991 7.24287 87.038 7.29488 87.113 cv
7.34587 87.188 7.37987 87.24 7.39787 87.271 cv
7.41588 87.301 7.44588 87.353 7.48787 87.428 cv
7.52988 87.503 7.56187 87.566 7.58188 87.617 cv
7.60388 87.668 7.62787 87.731 7.65488 87.806 cv
7.68088 87.881 7.69987 87.956 7.70888 88.031 cv
7.71788 88.106 7.72188 88.183 7.72188 88.261 cv
7.72188 88.693 7.59488 89.027 7.33987 89.264 cv
7.08487 89.501 6.77687 89.619 6.41687 89.619 cv
5.88287 89.619 5.50787 89.302 5.29187 88.665 cv
5.26787 88.6 5.22787 88.481 5.17087 88.31 cv
5.11388 88.139 5.06987 88.005 5.03987 87.909 cv
5.00987 87.814 4.96988 87.699 4.91887 87.568 cv
4.86688 87.436 4.82088 87.324 4.77887 87.235 cv
4.73688 87.145 4.69487 87.07 4.65288 87.01 cv
4.17587 87.01 li
3.73187 87.01 3.50987 87.184 3.50987 87.531 cv
3.50987 87.862 3.80988 88.125 4.40988 88.323 cv
4.64987 88.402 4.76988 88.525 4.76988 88.693 cv
4.76988 88.855 4.71988 89.03 4.62088 89.219 cv
4.52287 89.408 4.38287 89.502 4.20288 89.502 cv
3.89688 89.502 3.63588 89.308 3.41988 88.917 cv
3.20387 88.528 3.09587 88.012 3.09587 87.369 cv
3.09587 87.064 3.12288 86.801 3.17688 86.582 cv
3.23088 86.364 3.29688 86.198 3.37488 86.087 cv
3.45288 85.976 3.55388 85.889 3.67688 85.826 cv
3.79988 85.763 3.90887 85.724 4.00487 85.709 cv
4.10088 85.695 4.21788 85.687 4.35588 85.687 cv
6.43488 85.687 li
6.82487 85.687 7.04988 85.591 7.10988 85.399 cv
7.15187 85.273 7.16687 85.128 7.15488 84.966 cv
f
4.80579 83.0667 mo
6.22778 83.0667 li
6.44377 83.0667 6.61179 83.0547 6.73178 83.0317 cv
7.11578 82.9597 7.30779 82.7127 7.30779 82.2937 cv
7.30779 81.6867 6.69878 81.3837 5.48077 81.3837 cv
4.81477 81.3837 4.36678 81.4667 4.13577 81.6307 cv
3.90479 81.7967 3.78877 82.0137 3.78877 82.2847 cv
3.78877 82.6377 3.95978 82.8807 4.30177 83.0127 cv
4.40378 83.0487 4.57178 83.0667 4.80579 83.0667 cv
.989777 83.0667 mo
3.71678 83.0667 li
3.30278 82.5267 3.09578 82.0497 3.09578 81.6357 cv
3.09578 81.1567 3.28178 80.7547 3.65378 80.4347 cv
4.02577 80.1137 4.55978 79.9537 5.25578 79.9537 cv
5.65178 79.9537 5.99678 79.9957 6.29077 80.0797 cv
6.58478 80.1637 6.82178 80.2737 7.00179 80.4127 cv
7.18178 80.5497 7.32678 80.7227 7.43878 80.9297 cv
7.54977 81.1367 7.62378 81.3497 7.66278 81.5687 cv
7.70178 81.7877 7.72177 82.0357 7.72177 82.3107 cv
7.72177 82.8217 7.61978 83.2677 7.41577 83.6517 cv
7.72177 84.1377 li
7.55978 84.4257 li
2.02478 84.4257 li
1.85678 84.4257 1.73978 84.4427 1.67378 84.4757 cv
1.60777 84.5087 1.56877 84.5637 1.55678 84.6417 cv
1.50278 84.9577 li
1.17877 84.9577 li
.935776 83.1297 li
cp
f
.989883 77.5325 mo
6.83087 77.5325 li
7.01688 77.5325 7.13388 77.5005 7.18187 77.4335 cv
7.22987 77.3675 7.25987 77.2055 7.27188 76.9475 cv
7.61388 76.9475 li
7.61388 79.4765 li
7.27188 79.4765 li
7.25987 79.2195 7.22987 79.0565 7.18187 78.9905 cv
7.13388 78.9255 7.01688 78.8915 6.83087 78.8915 cv
2.02487 78.8915 li
1.85687 78.8915 1.73988 78.9085 1.67387 78.9415 cv
1.60788 78.9735 1.56888 79.0295 1.55687 79.1075 cv
1.50287 79.4235 li
1.17888 79.4235 li
.935883 77.5955 li
cp
f
4.91368 75.1292 mo
4.91368 74.0142 li
4.91368 73.9052 4.89467 73.8322 4.85567 73.7932 cv
4.81668 73.7542 4.73668 73.7342 4.61667 73.7342 cv
3.87868 73.7342 3.50967 73.9472 3.50967 74.3732 cv
3.50967 74.6382 3.64767 74.8292 3.92368 74.9492 cv
4.19968 75.0692 4.52968 75.1292 4.91368 75.1292 cv
6.22768 72.7172 mo
6.40767 72.3942 li
7.28368 72.7302 7.72168 73.3832 7.72168 74.3562 cv
7.72168 74.7572 7.66068 75.1062 7.53767 75.4002 cv
7.41467 75.6932 7.24167 75.9232 7.01967 76.0882 cv
6.79767 76.2532 6.55467 76.3732 6.29068 76.4472 cv
6.02667 76.5232 5.73267 76.5612 5.40868 76.5612 cv
4.72467 76.5612 4.16867 76.3802 3.73967 76.0212 cv
3.31067 75.6602 3.09567 75.1002 3.09567 74.3372 cv
3.09567 74.0072 3.13768 73.7162 3.22168 73.4642 cv
3.30568 73.2122 3.41068 73.0162 3.53667 72.8752 cv
3.66267 72.7332 3.81467 72.6202 3.99167 72.5322 cv
4.16867 72.4462 4.33368 72.3892 4.48668 72.3612 cv
4.63968 72.3352 4.79967 72.3212 4.96767 72.3212 cv
5.10567 72.3212 5.20367 72.3602 5.26067 72.4392 cv
5.31767 72.5172 5.34567 72.6402 5.34567 72.8082 cv
5.34567 75.1292 li
6.46767 75.1292 7.02867 74.7282 7.02867 73.9232 cv
7.02867 73.4012 6.76167 72.9992 6.22768 72.7172 cv
f
5.50798 68.1458 mo
4.79997 68.3328 4.44597 68.5788 4.44597 68.8838 cv
4.44597 68.9918 4.48398 69.0798 4.55797 69.1448 cv
4.63298 69.2108 4.71297 69.2558 4.79697 69.2798 cv
4.88097 69.3038 5.00397 69.3318 5.16597 69.3608 cv
5.32797 69.3908 5.44498 69.4158 5.51697 69.4328 cv
5.51697 69.8018 li
5.18697 69.8018 4.89798 69.7908 4.64897 69.7658 cv
4.39998 69.7428 4.14798 69.6938 3.89197 69.6228 cv
3.63698 69.5498 3.44098 69.4348 3.30298 69.2758 cv
3.16498 69.1168 3.09598 68.9198 3.09598 68.6858 cv
3.09598 68.4458 3.71698 68.1908 4.95897 67.9208 cv
3.22197 67.2368 li
3.22197 65.7698 li
7.40697 67.4348 li
8.10898 67.2608 8.45998 67.0448 8.45998 66.7878 cv
8.45998 66.5708 8.35297 66.4088 8.13997 66.3008 cv
7.92697 66.1928 7.67097 66.1388 7.37097 66.1388 cv
7.37097 65.7698 li
7.61098 65.7698 7.80597 65.7728 7.95598 65.7788 cv
8.10597 65.7858 8.28897 65.7968 8.50497 65.8148 cv
8.72098 65.8328 8.89697 65.8648 9.03098 65.9098 cv
9.16698 65.9548 9.29997 66.0128 9.43198 66.0848 cv
9.56398 66.1568 9.66098 66.2508 9.72397 66.3688 cv
9.78697 66.4858 9.81897 66.6248 9.81897 66.7878 cv
9.81897 67.0868 9.19197 67.3728 7.93797 67.6418 cv
9.68398 68.3348 li
9.68398 69.8018 li
cp
f
2.17789 61.4221 mo
7.97388 61.4221 li
8.11787 61.4221 8.22089 61.4041 8.28387 61.3681 cv
8.34688 61.3321 8.38487 61.2571 8.39688 61.1431 cv
8.45988 60.6031 li
8.76588 60.6031 li
8.76588 62.2681 li
1.38588 62.2681 li
1.38588 60.6031 li
1.69188 60.6031 li
1.75488 61.1431 li
1.76688 61.2571 1.80388 61.3321 1.86688 61.3681 cv
1.92989 61.4041 2.03387 61.4221 2.17789 61.4221 cv
f
6.40788 57.3821 mo
5.10287 57.3821 li
5.32487 57.8731 5.45088 58.1441 5.48088 58.1921 cv
5.63687 58.4681 5.89787 58.6061 6.26387 58.6061 cv
6.49188 58.6061 6.67488 58.5411 6.81288 58.4121 cv
6.95088 58.2831 7.01988 58.1251 7.01988 57.9401 cv
7.01988 57.7951 6.97287 57.6681 6.88087 57.5571 cv
6.78688 57.4461 6.62987 57.3881 6.40788 57.3821 cv
7.15488 55.3381 mo
7.45187 55.3121 li
7.63188 55.7681 7.72188 56.2111 7.72188 56.6441 cv
7.72188 56.8421 7.67688 56.9901 7.58687 57.0891 cv
7.49687 57.1881 7.36787 57.2741 7.19987 57.3461 cv
7.21187 57.3631 7.24287 57.4101 7.29488 57.4851 cv
7.34587 57.5601 7.37987 57.6121 7.39787 57.6431 cv
7.41588 57.6731 7.44588 57.7251 7.48787 57.8001 cv
7.52988 57.8751 7.56187 57.9381 7.58188 57.9891 cv
7.60388 58.0401 7.62787 58.1031 7.65488 58.1781 cv
7.68088 58.2531 7.69987 58.3281 7.70888 58.4031 cv
7.71788 58.4781 7.72188 58.5551 7.72188 58.6331 cv
7.72188 59.0651 7.59488 59.3991 7.33987 59.6361 cv
7.08487 59.8731 6.77687 59.9911 6.41687 59.9911 cv
5.88287 59.9911 5.50787 59.6741 5.29187 59.0371 cv
5.26787 58.9721 5.22787 58.8531 5.17087 58.6821 cv
5.11388 58.5111 5.06987 58.3771 5.03987 58.2811 cv
5.00987 58.1861 4.96988 58.0711 4.91887 57.9401 cv
4.86688 57.8081 4.82088 57.6961 4.77887 57.6071 cv
4.73688 57.5171 4.69487 57.4421 4.65288 57.3821 cv
4.17587 57.3821 li
3.73187 57.3821 3.50987 57.5561 3.50987 57.9031 cv
3.50987 58.2341 3.80988 58.4971 4.40988 58.6951 cv
4.64987 58.7741 4.76988 58.8971 4.76988 59.0651 cv
4.76988 59.2271 4.71988 59.4021 4.62088 59.5911 cv
4.52287 59.7801 4.38287 59.8741 4.20288 59.8741 cv
3.89688 59.8741 3.63588 59.6801 3.41988 59.2891 cv
3.20387 58.9001 3.09587 58.3841 3.09587 57.7411 cv
3.09587 57.4361 3.12288 57.1731 3.17688 56.9541 cv
3.23088 56.7361 3.29688 56.5701 3.37488 56.4591 cv
3.45288 56.3481 3.55388 56.2611 3.67688 56.1981 cv
3.79988 56.1351 3.90887 56.0961 4.00487 56.0811 cv
4.10088 56.0671 4.21788 56.0591 4.35588 56.0591 cv
6.43488 56.0591 li
6.82487 56.0591 7.04988 55.9631 7.10988 55.7711 cv
7.15187 55.6451 7.16687 55.5001 7.15488 55.3381 cv
f
7.49228 53.6155 mo
7.64528 53.7625 7.72127 53.9595 7.72127 54.2055 cv
7.72127 54.4515 7.64326 54.6505 7.48827 54.8035 cv
7.33228 54.9565 7.13127 55.0335 6.88527 55.0335 cv
6.63828 55.0335 6.43828 54.9565 6.28227 54.8035 cv
6.12627 54.6505 6.04828 54.4515 6.04828 54.2055 cv
6.04828 53.9535 6.12627 53.7525 6.28227 53.6015 cv
6.43828 53.4525 6.63828 53.3775 6.88527 53.3775 cv
7.13727 53.3885 7.33926 53.4695 7.49228 53.6155 cv
f
7.61388 49.2366 mo
7.10986 49.3086 li
7.13387 49.3446 7.19287 49.4386 7.28487 49.5916 cv
7.37888 49.7456 7.44887 49.8696 7.49687 49.9656 cv
7.54488 50.0616 7.59387 50.1966 7.64587 50.3706 cv
7.69687 50.5446 7.72186 50.7216 7.72186 50.9016 cv
7.72186 51.2736 7.61787 51.5846 7.41087 51.8336 cv
7.20387 52.0826 6.85786 52.2066 6.37187 52.2066 cv
4.18488 52.2066 li
4.01086 52.2066 3.89388 52.2226 3.83386 52.2566 cv
3.77386 52.2896 3.73787 52.3446 3.72588 52.4226 cv
3.68086 52.7376 li
3.35687 52.7376 li
3.09587 50.9106 li
3.14987 50.8476 li
6.02986 50.8476 li
6.68387 50.8476 7.01086 50.5956 7.01086 50.0916 cv
7.01086 49.9056 6.96887 49.7526 6.88487 49.6326 cv
6.80087 49.5126 6.70187 49.4286 6.58788 49.3806 cv
6.46786 49.3326 6.29987 49.3086 6.08386 49.3086 cv
4.18488 49.3086 li
4.01086 49.3086 3.89388 49.3256 3.83386 49.3576 cv
3.77386 49.3906 3.73787 49.4466 3.72588 49.5246 cv
3.68086 49.8396 li
3.35687 49.8396 li
3.09587 48.0126 li
3.14987 47.9496 li
6.83087 47.9496 li
7.01688 47.9496 7.13387 47.9166 7.18187 47.8506 cv
7.22987 47.7846 7.25987 47.6226 7.27187 47.3646 cv
7.61388 47.3646 li
cp
f
7.49228 45.4339 mo
7.64528 45.5809 7.72127 45.7779 7.72127 46.0239 cv
7.72127 46.2699 7.64326 46.4689 7.48827 46.6219 cv
7.33228 46.7749 7.13127 46.8519 6.88527 46.8519 cv
6.63828 46.8519 6.43828 46.7749 6.28227 46.6219 cv
6.12627 46.4689 6.04828 46.2699 6.04828 46.0239 cv
6.04828 45.7719 6.12627 45.5709 6.28227 45.4199 cv
6.43828 45.2709 6.63828 45.1959 6.88527 45.1959 cv
7.13727 45.2069 7.33926 45.2879 7.49228 45.4339 cv
f
8.76578 42.8557 mo
8.76578 44.5207 li
8.45976 44.5207 li
8.39677 43.9807 li
8.38477 43.8677 8.34776 43.7927 8.28477 43.7557 cv
8.22177 43.7197 8.11777 43.7027 7.97377 43.7027 cv
2.17776 43.7027 li
2.03377 43.7027 1.93077 43.7197 1.86777 43.7557 cv
1.80476 43.7927 1.76677 43.8677 1.75478 43.9807 cv
1.69177 44.5207 li
1.38577 44.5207 li
1.38577 42.8557 li
cp
f
70.0553 174.44 mo
70.0553 179.192 li
70.0553 179.341 70.1063 179.445 70.2083 179.503 cv
70.3102 179.559 70.4992 179.587 70.7752 179.587 cv
71.0273 179.587 71.2502 179.553 71.4453 179.484 cv
71.6403 179.416 71.8343 179.289 72.0262 179.106 cv
72.2183 178.923 72.3662 178.638 72.4713 178.251 cv
72.5763 177.864 72.6292 177.388 72.6292 176.825 cv
72.6292 175.067 72.0203 174.187 70.8022 174.187 cv
70.5143 174.187 70.3173 174.204 70.2122 174.237 cv
70.1072 174.27 70.0553 174.337 70.0553 174.44 cv
67.9043 173.774 mo
70.9912 173.774 li
72.1072 173.78 72.9232 174.038 73.4392 174.547 cv
73.9612 175.064 74.2223 175.823 74.2223 176.825 cv
74.2223 177.239 74.1783 177.611 74.0912 177.941 cv
74.0042 178.271 73.8922 178.545 73.7542 178.764 cv
73.6162 178.983 73.4423 179.172 73.2322 179.331 cv
73.0222 179.49 72.8163 179.612 72.6153 179.696 cv
72.4142 179.78 72.1833 179.845 71.9222 179.893 cv
71.6613 179.942 71.4352 179.971 71.2433 179.984 cv
71.0512 179.996 70.8353 180.002 70.5952 180.002 cv
67.9043 180.002 li
67.9043 179.66 li
68.2282 179.648 68.4272 179.613 68.5023 179.556 cv
68.5772 179.499 68.6153 179.357 68.6153 179.128 cv
68.6153 174.646 li
68.6153 174.419 68.5772 174.276 68.5023 174.219 cv
68.4272 174.162 68.2282 174.127 67.9043 174.116 cv
cp
f
76.0495 175.096 mo
75.8035 175.096 75.6055 175.02 75.4554 174.867 cv
75.3055 174.714 75.2305 174.527 75.2305 174.304 cv
75.2305 174.088 75.3055 173.904 75.4554 173.75 cv
75.6055 173.598 75.8035 173.521 76.0495 173.521 cv
76.2954 173.521 76.4944 173.596 76.6475 173.746 cv
76.8004 173.897 76.8774 174.082 76.8774 174.304 cv
76.8774 174.527 76.7995 174.714 76.6435 174.867 cv
76.4875 175.02 76.2895 175.096 76.0495 175.096 cv
75.4195 179.218 mo
75.4195 176.573 li
75.4195 176.399 75.4025 176.282 75.3694 176.221 cv
75.3365 176.161 75.2805 176.125 75.2035 176.114 cv
74.8885 176.069 li
74.8885 175.744 li
76.7155 175.484 li
76.7784 175.537 li
76.7784 179.218 li
76.7784 179.405 76.8115 179.522 76.8774 179.57 cv
76.9435 179.617 77.1055 179.648 77.3635 179.659 cv
77.3635 180.001 li
74.8344 180.001 li
74.8344 179.659 li
75.0915 179.648 75.2545 179.617 75.3205 179.57 cv
75.3864 179.522 75.4195 179.405 75.4195 179.218 cv
f
77.8942 179.677 mo
77.7862 178.336 li
78.1282 178.336 li
78.2542 178.726 78.4322 179.05 78.6642 179.308 cv
78.8942 179.567 79.1512 179.696 79.4332 179.696 cv
79.6312 179.696 79.7842 179.648 79.8922 179.551 cv
80.0002 179.455 80.0542 179.321 80.0542 179.146 cv
80.0542 178.786 79.7542 178.501 79.1542 178.291 cv
78.2722 177.961 77.8312 177.499 77.8312 176.906 cv
77.8312 176.455 77.9902 176.106 78.3082 175.857 cv
78.6262 175.608 79.0612 175.484 79.6132 175.484 cv
80.1712 175.484 80.6212 175.588 80.9632 175.798 cv
80.9632 176.995 li
80.6302 176.995 li
80.5462 176.654 80.4122 176.385 80.2292 176.19 cv
80.0462 175.994 79.8412 175.898 79.6132 175.898 cv
79.4392 175.898 79.3012 175.948 79.1992 176.05 cv
79.0972 176.153 79.0462 176.276 79.0462 176.419 cv
79.0462 176.587 79.1232 176.73 79.2802 176.847 cv
79.4362 176.964 79.6612 177.076 79.9552 177.184 cv
80.3992 177.352 80.7292 177.546 80.9452 177.765 cv
81.1612 177.984 81.2692 178.277 81.2692 178.642 cv
81.2692 179.116 81.1012 179.479 80.7652 179.732 cv
80.4292 179.984 79.9782 180.11 79.4152 180.11 cv
78.7132 180.11 78.2062 179.965 77.8942 179.677 cv
f
83.5734 177.211 mo
83.5734 178.633 li
83.5734 178.819 83.5854 178.972 83.6094 179.092 cv
83.6934 179.494 83.9294 179.695 84.3204 179.695 cv
84.9444 179.695 85.2564 179.086 85.2564 177.868 cv
85.2564 177.214 85.1724 176.769 85.0044 176.531 cv
84.8364 176.295 84.6204 176.176 84.3564 176.176 cv
84.0024 176.176 83.7624 176.357 83.6364 176.716 cv
83.5944 176.836 83.5734 177.001 83.5734 177.211 cv
83.5734 180.001 mo
83.5734 181.288 li
83.5734 181.474 83.6134 181.591 83.6944 181.639 cv
83.7754 181.687 83.9844 181.717 84.3204 181.729 cv
84.3204 182.071 li
81.6294 182.071 li
81.6294 181.729 li
81.8864 181.717 82.0494 181.687 82.1154 181.639 cv
82.1814 181.591 82.2144 181.474 82.2144 181.288 cv
82.2144 176.572 li
82.2144 176.398 82.1974 176.281 82.1644 176.221 cv
82.1314 176.161 82.0754 176.125 81.9984 176.113 cv
81.6834 176.068 li
81.6834 175.744 li
83.4114 175.483 li
83.5734 176.104 li
83.7534 175.966 83.9034 175.859 84.0234 175.784 cv
84.1434 175.71 84.2964 175.641 84.4824 175.577 cv
84.6684 175.515 84.8604 175.483 85.0584 175.483 cv
85.5134 175.483 85.8994 175.671 86.2144 176.046 cv
86.5294 176.421 86.6874 176.962 86.6874 177.67 cv
86.6874 178.144 86.6274 178.546 86.5074 178.876 cv
86.3864 179.206 86.2114 179.458 85.9804 179.632 cv
85.7494 179.806 85.4994 179.929 85.2294 180.001 cv
84.9594 180.073 84.6444 180.109 84.2844 180.109 cv
83.9844 180.109 83.7474 180.073 83.5734 180.001 cv
f
89.1081 173.377 mo
89.1081 179.218 li
89.1081 179.404 89.1411 179.522 89.2071 179.569 cv
89.2731 179.617 89.4351 179.648 89.6931 179.659 cv
89.6931 180.001 li
87.1641 180.001 li
87.1641 179.659 li
87.4211 179.648 87.5841 179.617 87.6501 179.569 cv
87.7161 179.522 87.7491 179.404 87.7491 179.218 cv
87.7491 174.412 li
87.7491 174.244 87.7321 174.127 87.6991 174.061 cv
87.6661 173.995 87.6101 173.956 87.5331 173.944 cv
87.2181 173.89 li
87.2181 173.566 li
89.0451 173.323 li
cp
f
92.7526 178.795 mo
92.7526 177.49 li
92.2606 177.712 91.9906 177.838 91.9426 177.868 cv
91.6666 178.024 91.5286 178.285 91.5286 178.651 cv
91.5286 178.879 91.5926 179.063 91.7226 179.2 cv
91.8516 179.338 92.0086 179.407 92.1946 179.407 cv
92.3386 179.407 92.4656 179.36 92.5776 179.268 cv
92.6886 179.175 92.7466 179.017 92.7526 178.795 cv
94.7956 179.542 mo
94.8226 179.839 li
94.3666 180.019 93.9226 180.109 93.4906 180.109 cv
93.2926 180.109 93.1446 180.065 93.0446 179.974 cv
92.9456 179.884 92.8606 179.755 92.7886 179.587 cv
92.7706 179.599 92.7246 179.631 92.6486 179.682 cv
92.5736 179.733 92.5216 179.767 92.4916 179.785 cv
92.4616 179.803 92.4086 179.833 92.3346 179.875 cv
92.2586 179.917 92.1956 179.948 92.1456 179.97 cv
92.0936 179.99 92.0306 180.015 91.9566 180.041 cv
91.8806 180.068 91.8056 180.087 91.7316 180.096 cv
91.6556 180.105 91.5796 180.109 91.5016 180.109 cv
91.0696 180.109 90.7346 179.982 90.4986 179.727 cv
90.2606 179.472 90.1426 179.164 90.1426 178.804 cv
90.1426 178.271 90.4606 177.895 91.0966 177.679 cv
91.1626 177.655 91.2806 177.614 91.4526 177.558 cv
91.6236 177.501 91.7566 177.457 91.8526 177.427 cv
91.9486 177.398 92.0626 177.357 92.1946 177.306 cv
92.3266 177.255 92.4376 177.208 92.5276 177.166 cv
92.6176 177.124 92.6926 177.082 92.7526 177.04 cv
92.7526 176.563 li
92.7526 176.119 92.5786 175.898 92.2306 175.898 cv
91.9006 175.898 91.6366 176.197 91.4386 176.797 cv
91.3606 177.037 91.2376 177.157 91.0696 177.157 cv
90.9076 177.157 90.7316 177.107 90.5436 177.009 cv
90.3546 176.909 90.2596 176.77 90.2596 176.59 cv
90.2596 176.284 90.4546 176.024 90.8446 175.807 cv
91.2346 175.591 91.7506 175.483 92.3926 175.483 cv
92.6986 175.483 92.9606 175.51 93.1806 175.565 cv
93.3986 175.618 93.5646 175.684 93.6746 175.762 cv
93.7866 175.84 93.8736 175.941 93.9366 176.064 cv
93.9996 176.187 94.0386 176.296 94.0526 176.392 cv
94.0676 176.488 94.0756 176.606 94.0756 176.743 cv
94.0756 178.822 li
94.0756 179.212 94.1716 179.438 94.3636 179.497 cv
94.4896 179.539 94.6336 179.554 94.7956 179.542 cv
f
98.7106 178.597 mo
99.0255 178.742 li
98.7375 179.654 98.0926 180.11 97.0905 180.11 cv
96.4366 180.11 95.9206 179.914 95.5425 179.525 cv
95.1646 179.134 94.9756 178.571 94.9756 177.832 cv
94.9756 177.076 95.1796 176.494 95.5876 176.086 cv
95.9896 175.684 96.5446 175.484 97.2526 175.484 cv
97.6966 175.484 98.0936 175.574 98.4445 175.753 cv
98.7956 175.933 98.9716 176.173 98.9716 176.473 cv
98.9716 176.654 98.8936 176.791 98.7375 176.887 cv
98.5815 176.984 98.4106 177.032 98.2245 177.032 cv
98.0026 177.032 97.8586 176.926 97.7925 176.716 cv
97.7086 176.428 97.6216 176.22 97.5316 176.091 cv
97.4416 175.962 97.3216 175.898 97.1716 175.898 cv
96.9615 175.898 96.7816 176.043 96.6316 176.333 cv
96.4816 176.625 96.4066 177.052 96.4066 177.617 cv
96.4066 178.264 96.5146 178.726 96.7306 179.002 cv
96.9466 179.279 97.2226 179.416 97.5586 179.416 cv
97.8166 179.416 98.0356 179.355 98.2155 179.232 cv
98.3956 179.109 98.5605 178.898 98.7106 178.597 cv
f
100.852 177.301 mo
101.969 177.301 li
102.076 177.301 102.149 177.281 102.189 177.242 cv
102.227 177.203 102.247 177.124 102.247 177.004 cv
102.247 176.266 102.034 175.898 101.608 175.898 cv
101.344 175.898 101.152 176.035 101.032 176.311 cv
100.912 176.587 100.852 176.917 100.852 177.301 cv
103.264 178.615 mo
103.588 178.795 li
103.252 179.671 102.598 180.11 101.627 180.11 cv
101.224 180.11 100.876 180.048 100.582 179.925 cv
100.288 179.802 100.059 179.629 99.8942 179.407 cv
99.7281 179.186 99.6092 178.943 99.5341 178.678 cv
99.4582 178.414 99.4211 178.12 99.4211 177.796 cv
99.4211 177.113 99.6012 176.556 99.9612 176.127 cv
100.321 175.697 100.882 175.484 101.644 175.484 cv
101.975 175.484 102.266 175.526 102.518 175.61 cv
102.769 175.694 102.966 175.798 103.107 175.924 cv
103.248 176.05 103.361 176.201 103.449 176.379 cv
103.535 176.556 103.593 176.721 103.619 176.873 cv
103.646 177.027 103.66 177.188 103.66 177.355 cv
103.66 177.493 103.621 177.591 103.543 177.648 cv
103.465 177.704 103.342 177.734 103.174 177.734 cv
100.852 177.734 li
100.852 178.856 101.254 179.416 102.059 179.416 cv
102.58 179.416 102.982 179.15 103.264 178.615 cv
f
105.965 177.247 mo
105.965 179.281 li
105.965 179.419 105.987 179.511 106.032 179.556 cv
106.077 179.601 106.151 179.629 106.252 179.641 cv
106.442 179.659 li
106.442 180.001 li
104.021 180.001 li
104.021 179.659 li
104.278 179.647 104.441 179.617 104.507 179.569 cv
104.572 179.521 104.606 179.404 104.606 179.218 cv
104.606 176.572 li
104.606 176.398 104.589 176.281 104.557 176.221 cv
104.524 176.161 104.467 176.125 104.39 176.113 cv
104.074 176.068 li
104.074 175.744 li
105.848 175.483 li
105.965 176.103 li
105.983 176.092 106.041 176.055 106.141 175.991 cv
106.239 175.929 106.303 175.888 106.329 175.87 cv
106.356 175.851 106.412 175.819 106.496 175.77 cv
106.58 175.723 106.641 175.69 106.68 175.672 cv
106.719 175.654 106.778 175.629 106.856 175.596 cv
106.934 175.562 107 175.541 107.054 175.532 cv
107.108 175.523 107.17 175.513 107.242 175.501 cv
107.315 175.489 107.387 175.483 107.459 175.483 cv
108.023 175.483 108.431 175.708 108.683 176.158 cv
108.694 176.146 108.774 176.094 108.921 176 cv
109.069 175.907 109.174 175.843 109.236 175.807 cv
109.299 175.77 109.397 175.722 109.529 175.658 cv
109.66 175.596 109.783 175.551 109.898 175.523 cv
110.012 175.496 110.129 175.483 110.248 175.483 cv
110.711 175.483 111.059 175.606 111.293 175.851 cv
111.528 176.098 111.647 176.44 111.653 176.878 cv
111.653 179.218 li
111.653 179.404 111.686 179.521 111.752 179.569 cv
111.818 179.617 111.98 179.647 112.238 179.659 cv
112.238 180.001 li
109.817 180.001 li
109.817 179.659 li
110.006 179.641 li
110.108 179.629 110.182 179.601 110.227 179.556 cv
110.272 179.511 110.293 179.419 110.293 179.281 cv
110.293 177.04 li
110.287 176.758 110.222 176.542 110.096 176.392 cv
109.97 176.242 109.802 176.17 109.592 176.176 cv
109.418 176.176 109.264 176.229 109.128 176.338 cv
108.993 176.446 108.899 176.605 108.845 176.815 cv
108.82 176.911 108.809 177.055 108.809 177.247 cv
108.809 179.281 li
108.809 179.419 108.831 179.511 108.876 179.556 cv
108.921 179.601 108.994 179.629 109.097 179.641 cv
109.285 179.659 li
109.285 180.001 li
106.973 180.001 li
106.973 179.659 li
107.162 179.641 li
107.264 179.629 107.337 179.601 107.383 179.556 cv
107.428 179.511 107.449 179.419 107.449 179.281 cv
107.449 177.04 li
107.438 176.464 107.222 176.176 106.802 176.176 cv
106.61 176.176 106.442 176.231 106.298 176.343 cv
106.154 176.453 106.055 176.614 106 176.824 cv
105.977 176.926 105.965 177.067 105.965 177.247 cv
f
114.055 177.301 mo
115.172 177.301 li
115.28 177.301 115.353 177.281 115.393 177.242 cv
115.431 177.203 115.451 177.124 115.451 177.004 cv
115.451 176.266 115.238 175.898 114.812 175.898 cv
114.547 175.898 114.356 176.035 114.236 176.311 cv
114.116 176.587 114.055 176.917 114.055 177.301 cv
116.467 178.615 mo
116.791 178.795 li
116.455 179.671 115.801 180.11 114.83 180.11 cv
114.428 180.11 114.079 180.048 113.785 179.925 cv
113.492 179.802 113.262 179.629 113.097 179.407 cv
112.932 179.186 112.813 178.943 112.737 178.678 cv
112.662 178.414 112.625 178.12 112.625 177.796 cv
112.625 177.113 112.805 176.556 113.164 176.127 cv
113.525 175.697 114.086 175.484 114.848 175.484 cv
115.178 175.484 115.469 175.526 115.721 175.61 cv
115.973 175.694 116.169 175.798 116.311 175.924 cv
116.451 176.05 116.565 176.201 116.653 176.379 cv
116.739 176.556 116.796 176.721 116.823 176.873 cv
116.85 177.027 116.864 177.188 116.864 177.355 cv
116.864 177.493 116.825 177.591 116.746 177.648 cv
116.668 177.704 116.545 177.734 116.377 177.734 cv
114.055 177.734 li
114.055 178.856 114.457 179.416 115.262 179.416 cv
115.784 179.416 116.186 179.15 116.467 178.615 cv
f
122.066 176.869 mo
122.066 179.218 li
122.066 179.404 122.098 179.521 122.165 179.569 cv
122.231 179.617 122.393 179.647 122.651 179.659 cv
122.651 180.001 li
120.23 180.001 li
120.23 179.659 li
120.419 179.64 li
120.52 179.629 120.594 179.6 120.639 179.556 cv
120.684 179.511 120.707 179.419 120.707 179.281 cv
120.707 176.995 li
120.689 176.449 120.452 176.176 119.996 176.176 cv
119.647 176.176 119.402 176.323 119.258 176.617 cv
119.198 176.737 119.169 176.914 119.169 177.148 cv
119.169 179.281 li
119.169 179.419 119.19 179.511 119.235 179.556 cv
119.28 179.6 119.354 179.629 119.456 179.64 cv
119.645 179.659 li
119.645 180.001 li
117.223 180.001 li
117.223 179.659 li
117.481 179.647 117.643 179.617 117.71 179.569 cv
117.776 179.521 117.809 179.404 117.809 179.218 cv
117.809 176.572 li
117.809 176.398 117.792 176.281 117.759 176.221 cv
117.726 176.161 117.67 176.125 117.592 176.113 cv
117.278 176.068 li
117.278 175.744 li
119.051 175.483 li
119.169 176.103 li
119.45 175.936 119.641 175.823 119.744 175.766 cv
119.846 175.71 119.991 175.648 120.18 175.582 cv
120.37 175.515 120.545 175.483 120.707 175.483 cv
121.157 175.483 121.495 175.604 121.719 175.848 cv
121.944 176.091 122.059 176.431 122.066 176.869 cv
f
125.836 176.041 mo
124.9 176.041 li
124.9 178.606 li
124.9 179.158 125.092 179.434 125.477 179.434 cv
125.68 179.434 125.852 179.404 125.989 179.344 cv
126.088 179.623 li
125.572 179.947 125.096 180.109 124.657 180.109 cv
124.369 180.109 124.111 180.01 123.883 179.812 cv
123.655 179.614 123.541 179.326 123.541 178.948 cv
123.541 176.041 li
123.02 176.041 li
123.02 175.591 li
123.586 175.591 li
124.379 174.457 li
124.9 174.457 li
124.9 175.591 li
125.836 175.591 li
cp
f
129.904 174.566 mo
129.904 180.362 li
129.904 180.505 129.922 180.609 129.958 180.672 cv
129.994 180.735 130.069 180.772 130.183 180.785 cv
130.722 180.847 li
130.722 181.154 li
129.058 181.154 li
129.058 173.774 li
130.722 173.774 li
130.722 174.08 li
130.183 174.142 li
130.069 174.155 129.994 174.192 129.958 174.255 cv
129.922 174.318 129.904 174.421 129.904 174.566 cv
f
134.674 180.001 mo
134.602 179.497 li
134.56 179.522 134.44 179.598 134.242 179.727 cv
134.044 179.855 133.869 179.951 133.72 180.015 cv
133.57 180.077 133.417 180.109 133.261 180.109 cv
132.944 180.109 132.682 180.013 132.479 179.821 cv
132.46 179.821 li
132.46 180.073 li
132.46 180.349 132.547 180.643 132.721 180.955 cv
132.871 181.23 132.945 181.417 132.945 181.513 cv
132.945 181.687 132.838 181.846 132.621 181.99 cv
132.442 182.116 132.24 182.179 132.02 182.179 cv
131.91 182.179 131.831 182.147 131.78 182.085 cv
131.73 182.022 131.703 181.903 131.703 181.729 cv
131.703 176.572 li
131.703 176.398 131.688 176.281 131.654 176.221 cv
131.621 176.161 131.567 176.125 131.488 176.113 cv
131.173 176.068 li
131.173 175.744 li
133 175.483 li
133.063 175.537 li
133.063 178.417 li
133.063 179.071 133.315 179.398 133.819 179.398 cv
134.005 179.398 134.158 179.356 134.278 179.272 cv
134.399 179.188 134.483 179.089 134.529 178.975 cv
134.578 178.855 134.602 178.687 134.602 178.471 cv
134.602 176.572 li
134.602 176.398 134.586 176.281 134.553 176.221 cv
134.52 176.161 134.464 176.125 134.386 176.113 cv
134.07 176.068 li
134.07 175.744 li
135.899 175.483 li
135.961 175.537 li
135.961 179.218 li
135.961 179.404 135.994 179.522 136.061 179.569 cv
136.126 179.617 136.287 179.647 136.546 179.659 cv
136.546 180.001 li
cp
f
138.805 177.247 mo
138.805 179.281 li
138.805 179.419 138.828 179.511 138.873 179.556 cv
138.918 179.601 138.991 179.629 139.093 179.641 cv
139.282 179.659 li
139.282 180.001 li
136.862 180.001 li
136.862 179.659 li
137.119 179.647 137.282 179.617 137.348 179.569 cv
137.413 179.521 137.446 179.404 137.446 179.218 cv
137.446 176.572 li
137.446 176.398 137.43 176.281 137.397 176.221 cv
137.364 176.161 137.308 176.125 137.231 176.113 cv
136.915 176.068 li
136.915 175.744 li
138.688 175.483 li
138.805 176.103 li
138.823 176.092 138.881 176.055 138.981 175.991 cv
139.08 175.929 139.143 175.888 139.17 175.87 cv
139.197 175.851 139.252 175.819 139.336 175.77 cv
139.42 175.723 139.482 175.69 139.521 175.672 cv
139.56 175.654 139.618 175.629 139.696 175.596 cv
139.774 175.562 139.84 175.541 139.895 175.532 cv
139.948 175.523 140.011 175.513 140.083 175.501 cv
140.155 175.489 140.227 175.483 140.299 175.483 cv
140.864 175.483 141.272 175.708 141.524 176.158 cv
141.535 176.146 141.615 176.094 141.762 176 cv
141.909 175.907 142.014 175.843 142.076 175.807 cv
142.14 175.77 142.237 175.722 142.369 175.658 cv
142.501 175.596 142.624 175.551 142.739 175.523 cv
142.852 175.496 142.969 175.483 143.089 175.483 cv
143.551 175.483 143.899 175.606 144.133 175.851 cv
144.368 176.098 144.487 176.44 144.493 176.878 cv
144.493 179.218 li
144.493 179.404 144.526 179.521 144.592 179.569 cv
144.659 179.617 144.821 179.647 145.078 179.659 cv
145.078 180.001 li
142.657 180.001 li
142.657 179.659 li
142.846 179.641 li
142.948 179.629 143.022 179.601 143.067 179.556 cv
143.112 179.511 143.134 179.419 143.134 179.281 cv
143.134 177.04 li
143.128 176.758 143.063 176.542 142.936 176.392 cv
142.811 176.242 142.643 176.17 142.432 176.176 cv
142.258 176.176 142.104 176.229 141.969 176.338 cv
141.834 176.446 141.739 176.605 141.686 176.815 cv
141.661 176.911 141.649 177.055 141.649 177.247 cv
141.649 179.281 li
141.649 179.419 141.672 179.511 141.717 179.556 cv
141.762 179.601 141.835 179.629 141.938 179.641 cv
142.126 179.659 li
142.126 180.001 li
139.813 180.001 li
139.813 179.659 li
140.002 179.641 li
140.104 179.629 140.178 179.601 140.223 179.556 cv
140.268 179.511 140.29 179.419 140.29 179.281 cv
140.29 177.04 li
140.278 176.464 140.063 176.176 139.643 176.176 cv
139.45 176.176 139.282 176.231 139.139 176.343 cv
138.994 176.453 138.895 176.614 138.841 176.824 cv
138.817 176.926 138.805 177.067 138.805 177.247 cv
f
147.067 181.154 mo
145.402 181.154 li
145.402 180.847 li
145.942 180.785 li
146.056 180.772 146.13 180.735 146.167 180.673 cv
146.203 180.609 146.22 180.506 146.22 180.362 cv
146.22 174.566 li
146.22 174.422 146.203 174.318 146.167 174.256 cv
146.13 174.192 146.056 174.155 145.942 174.142 cv
145.402 174.08 li
145.402 173.774 li
147.067 173.774 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
